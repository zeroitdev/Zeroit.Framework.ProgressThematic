// ***********************************************************************
// Assembly         : Zeroit.Framework.ProgressThematic
// Author           : ZEROIT
// Created          : 11-22-2018
//
// Last Modified By : ZEROIT
// Last Modified On : 12-12-2018
// ***********************************************************************
// <copyright file="PeaceAnimatorWithEditor - StartFasterAnimation.cs" company="Zeroit Dev Technologies">
//     Copyright © Zeroit Dev Technologies  2017. All Rights Reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Linq;
using System.Windows.Forms;
using Zeroit.Framework.ProgressThematic.AnimationHelpers.WinFormAnimation;
using Zeroit.Framework.ProgressThematic.AnimationHelpers.AnimationEditors;

namespace Zeroit.Framework.ProgressThematic.AnimationHelpers.PeaceAnimator_WinformAnimation
{
    public class StartFasterAnimation
    {
        public static void StartFaster(

            animationMode animationMode,
            Control control,
            PeaceAnimatorWithEditor peaceanimatorWithEditor,
            PeaceInput peaceInput,
            Animator _animator,
            Animator2D _animator2D,
            Animator3D _animator3D
            )
        {
            switch (peaceInput._animationMode)
            {
                case animationMode.OneD:

                    switch (peaceInput.oneDProperty)
                    {
                        case Animator.KnownProperties.Value:

                            switch (peaceInput.oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }

                            _animator.Play(peaceInput.control, Animator.KnownProperties.Value);

                            #region Old Code

                            //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay,AnimationFunctions.BounceEaseInOut));

                            //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                            #endregion

                            break;

                        #region Old Code on Text, Caption, BackColor, ForeColor
                        //case Animator.KnownProperties.Text:

                        //    switch (peaceInput.oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(peaceInput.control, Animator.KnownProperties.Text);

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                        //    #endregion

                        //    break;
                        //case Animator.KnownProperties.Caption:

                        //    switch (peaceInput.oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(peaceInput.control, Animator.KnownProperties.Caption);

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                        //    #endregion

                        //    break;
                        //case Animator.KnownProperties.BackColor:

                        //    switch (peaceInput.oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            //_animator.Paths = new Path((float)peaceInput.startColor.A, (float)peaceInput.endColor.B, peaceInput.path1_duration).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            //_animator.Paths = new Path((float)peaceInput.startColor.A, (float)peaceInput.endColor.B, peaceInput.path1_duration).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            //_animator.Paths = new Path((float)peaceInput.startColor.A, (float)peaceInput.endColor.B, peaceInput.path1_duration).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            //_animator.Paths = new Path((float)peaceInput.startColor.A, (float)peaceInput.endColor.B, peaceInput.path1_duration).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    //_animator.Play(new SafeInvoker<Color>(SetsColor, this), "BackColor", new SafeInvoker(End, peaceInput.control));

                        //    _animator.Play(peaceInput.control, Animator.KnownProperties.BackColor);

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay, AnimationFunctions.QuarticEaseInOut));
                        //    //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                        //    //_animator.Play(peaceInput.control, Animator.KnownProperties.BackColor);

                        //    //SafeInvoker<Color> safeColor = new SafeInvoker<Color>(new Action<Color>(SetsColor), peaceInput.control);
                        //    //var prop = peaceInput.control.GetType().GetProperty("BackColor",
                        //    //BindingFlags.IgnoreCase | BindingFlags.Static | BindingFlags.Public | BindingFlags.Instance |
                        //    //BindingFlags.SetProperty);

                        //    //_animator.Play(new SafeInvoker<Color>(
                        //    //value => prop.SetValue(peaceInput.control, Convert.ChangeType(value, prop.PropertyType), null),
                        //    //peaceInput.control), safeColor.ToString());
                        //    //

                        //    //_animator.Play(peaceInput.control, Animator.KnownProperties.BackColor, safeColor);

                        //    #endregion

                        //    break;
                        //case Animator.KnownProperties.ForeColor:

                        //    switch (peaceInput.oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(peaceInput.control, Animator.KnownProperties.ForeColor);

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                        //    #endregion

                        //    break; 
                        #endregion

                        case Animator.KnownProperties.Opacity:

                            switch (peaceInput.oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }


                            _animator.Play(peaceInput.control, Animator.KnownProperties.Opacity);

                            #region Old Code
                            //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                            //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                            #endregion

                            break;

                        case Animator.KnownProperties.Custom:

                            switch (peaceInput.oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }


                            _animator.Play(peaceInput.control, peaceInput.propertyName);

                            #region Testing Code
                            //PropertyInfo propinfo = peaceInput.control.GetType().GetProperty(peaceInput.propertyName, BindingFlags.GetProperty);

                            //var propvalue = propinfo.GetValue(propinfo);

                            //if (propvalue.GetType() == typeof(Int32))
                            //{
                            //    _animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                            //}
                            #endregion

                            #region Old Code
                            //_animator.Paths.Last().Reverse();

                            //_animator.Play(peaceInput.control, peaceInput.propertyName, new SafeInvoker(AutoStop));

                            //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                            #endregion

                            break;

                        case Animator.KnownProperties.Width:

                            switch (peaceInput.oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }

                            _animator.Play(peaceInput.control, "Width");

                            #region Old Code
                            //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                            //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                            #endregion

                            break;

                        case Animator.KnownProperties.Height:

                            switch (peaceInput.oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }

                            _animator.Play(peaceInput.control, "Height");

                            #region Old Code
                            //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                            //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                            #endregion

                            break;

                        #region Old Code
                        //case Animator.KnownProperties.Horizontal:

                        //    switch (peaceInput.oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(peaceInput.control, "Point.X");

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                        //    #endregion

                        //    break;

                        //case Animator.KnownProperties.Vertical:

                        //    switch (peaceInput.oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(peaceInput.control, "Point.Y");

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(peaceInput.path1_start, peaceInput.path1_end, peaceInput.path1_duration).ToArray();

                        //    #endregion

                        //    break; 
                        #endregion

                        default:
                            break;
                    }
                    break;

                case animationMode.TwoD:

                    if (peaceInput.twoDContinue)
                    {
                        switch (peaceInput.path_easingFunction)
                        {

                            case KnownAnimationFunctions.None:
                                break;
                            case KnownAnimationFunctions.BounceEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseOutIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CubicEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CubicEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CubicEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.Liner:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CircularEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CircularEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CircularEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.SinusoidalEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.SinusoidalEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.SinusoidalEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            default:
                                break;


                        }

                    }


                    else
                    {
                        switch (peaceInput.path_easingFunction)
                        {

                            case KnownAnimationFunctions.None:
                                break;
                            case KnownAnimationFunctions.BounceEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseOutIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CubicEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CubicEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CubicEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.Liner:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CircularEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CircularEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CircularEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.SinusoidalEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.SinusoidalEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.SinusoidalEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                switch (peaceInput.continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                        new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            default:
                                break;


                        }
                    }

                    #region Old Code
                    //_animator2D.Paths = new Path2D(
                    //new Path(peaceInput.path2D_start_1, peaceInput.path2D_end_1, peaceInput.path2D_duration_1, peaceInput.path2D_delay_1 , AnimationFunctions.BounceEaseInOut),

                    //new Path(peaceInput.path2D_start_2, peaceInput.path2D_end_2, peaceInput.path2D_duration_2, peaceInput.path2D_delay_2, AnimationFunctions.BounceEaseIn))
                    //.ContinueTo(new Path2D(
                    //    new Path(peaceInput.continued_path2D_start_1, peaceInput.continued_path2D_end_1, peaceInput.continued_path2D_duration_1, peaceInput.continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                    //    new Path(peaceInput.continued_path2D_start_2, peaceInput.continued_path2D_end_2, peaceInput.continued_path2D_duration_2, peaceInput.continued_path2D_delay_2, AnimationFunctions.Liner)));

                    #endregion

                    switch (peaceInput.twoDProperty)
                    {
                        case Animator2D.KnownProperties.Size:
                            _animator2D.Play(peaceInput.control, Animator2D.KnownProperties.Size);
                            break;
                        case Animator2D.KnownProperties.Location:
                            _animator2D.Play(peaceInput.control, Animator2D.KnownProperties.Location);
                            break;
                        default:
                            break;
                    }

                    break;
                case animationMode.ThreeD:

                    _animator3D.Stop();

                    switch (peaceInput.threeD_path_easingFunction)
                    {
                        case KnownAnimationFunctions.None:
                            break;
                        case KnownAnimationFunctions.BounceEaseOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.BounceEaseOut).ToArray();
                            break;
                        case KnownAnimationFunctions.BounceEaseIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.BounceEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.BounceEaseInOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.BounceEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.BounceEaseOutIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.BounceEaseOutIn).ToArray();

                            break;
                        case KnownAnimationFunctions.CubicEaseIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.CubicEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.CubicEaseInOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.CubicEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.CubicEaseOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.CubicEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.Liner:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.Liner).ToArray();

                            break;
                        case KnownAnimationFunctions.CircularEaseInOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.CircularEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.CircularEaseIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.CircularEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.CircularEaseOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.CircularEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuadraticEaseIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuadraticEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.QuadraticEaseOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuadraticEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuadraticEaseInOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuadraticEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuarticEaseIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuarticEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.QuarticEaseOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuarticEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuarticEaseInOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuarticEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuinticEaseInOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuinticEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuinticEaseIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuinticEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.QuinticEaseOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.QuinticEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.SinusoidalEaseIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.SinusoidalEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.SinusoidalEaseOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.SinusoidalEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.SinusoidalEaseInOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.SinusoidalEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.ExponentialEaseIn:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.ExponentialEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.ExponentialEaseOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.ExponentialEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.ExponentialEaseInOut:
                            _animator3D.Paths =
                                new Path3D(peaceInput.startColor.ToFloat3D(), peaceInput.endColor.ToFloat3D(), peaceInput.path3_duration, peaceInput.path3_delay, AnimationFunctions.ExponentialEaseInOut).ToArray();

                            break;
                        default:
                            break;
                    }


                    switch (peaceInput.threeDProperty)
                    {
                        case Animator3D.KnownProperties.BackColor:
                            _animator3D.Play(peaceInput.control, Animator3D.KnownProperties.BackColor, new SafeInvoker(() =>
                            {
                                _animator3D.Paths = _animator3D.Paths.Last().Reverse().ToArray();
                                _animator3D.Play(peaceInput.control, Animator3D.KnownProperties.BackColor);
                            }));
                            break;
                        case Animator3D.KnownProperties.ForeColor:
                            _animator3D.Play(peaceInput.control, Animator3D.KnownProperties.ForeColor, new SafeInvoker(() =>
                            {
                                _animator3D.Paths = _animator3D.Paths.Last().Reverse().ToArray();
                                _animator3D.Play(peaceInput.control, Animator3D.KnownProperties.ForeColor);
                            }));
                            break;

                        case Animator3D.KnownProperties.Custom:
                            _animator3D.Play(peaceInput.control, peaceInput.colorPropertyName, new SafeInvoker(() =>
                            {
                                _animator3D.Paths = _animator3D.Paths.Last().Reverse().ToArray();
                                _animator3D.Play(peaceInput.control, peaceInput.colorPropertyName);
                            }));
                            break;

                        default:
                            break;
                    }

                    break;
                //case animationMode.Other:
                //    break;
                default:
                    break;
            }

        }

    }
}
