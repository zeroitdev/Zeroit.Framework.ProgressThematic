// ***********************************************************************
// Assembly         : Zeroit.Framework.ProgressThematic
// Author           : ZEROIT
// Created          : 11-22-2018
//
// Last Modified By : ZEROIT
// Last Modified On : 12-12-2018
// ***********************************************************************
// <copyright file="PeaceAnimator.cs" company="Zeroit Dev Technologies">
//    This program is for creating a Progress control with an Editor.
//    Copyright ©  2017  Zeroit Dev Technologies
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//    You can contact me at zeroitdevnet@gmail.com or zeroitdev@outlook.com
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Linq;
using System.ComponentModel;
using System.Windows.Forms;
using System.Drawing;
using System.Reflection;

namespace Zeroit.Framework.ProgressThematic.AnimationHelpers.WinFormAnimation
{
    /// <summary>
    /// <c><see cref="PeaceAnimator"/></c> : Sets the animation mode.
    /// </summary>
    public enum animationMode
    {
        /// <summary>
        /// Sets the animation mode to 1D.
        /// </summary>
        OneD,
        /// <summary>
        /// Sets the animation mode to 2D.
        /// </summary>
        TwoD,
        /// <summary>
        /// Sets the animation mode to 3D.
        /// </summary>
        ThreeD,
        /// <summary>
        /// Sets the animation mode to Default.
        /// </summary>
        Default
    }

    /// <summary>
    /// A class collection for providing animation functionality.
    /// </summary>
    /// <seealso cref="System.ComponentModel.Component" />
    [ToolboxItem(false)]
    public class PeaceAnimator : Component
    {
        
        #region Private Fields

        private int alpha = 10;

        
        private animationMode _animationMode = animationMode.OneD;

        private bool repeat = false;
        private bool reverse = false;

        private float path1_start = 0;
        private float path1_end = 100;
        private ulong path1_duration = 5000;
        private ulong path1_delay = 0;

        private float path2D_start_1 = 70;
        private float path2D_end_1 = 320;
        private ulong path2D_duration_1 = 2000;
        private ulong path2D_delay_1 = 0;

        private float path2D_start_2 = 5;
        private float path2D_end_2 = 100;
        private ulong path2D_duration_2 = 2000;
        private ulong path2D_delay_2 = 0;

        private float continued_path2D_start_1 = 320;
        private float continued_path2D_end_1 = 70;
        private ulong continued_path2D_duration_1 = 2000;
        private ulong continued_path2D_delay_1 = 300;

        private float continued_path2D_start_2 = 100;
        private float continued_path2D_end_2 = 5;
        private ulong continued_path2D_duration_2 = 1700;
        private ulong continued_path2D_delay_2 = 600;

        private float path3D_start_1 = 70;
        private float path3D_end_1 = 320;
        private ulong path3_duration = 3000;
        private ulong path3_delay = 0;


        private Control control = new Control();
        private Animator _animator /*= new Animator()*/;
        private Animator2D _animator2D = new Animator2D();
        private Animator3D _animator3D = new Animator3D();


        private Animator.KnownProperties oneDProperty = Animator.KnownProperties.Value;
        private Animator2D.KnownProperties twoDProperty = Animator2D.KnownProperties.Location;
        private Animator3D.KnownProperties threeDProperty = Animator3D.KnownProperties.BackColor;

        private KnownAnimationFunctions oneD_path_easingFunction = KnownAnimationFunctions.CircularEaseIn;

        private KnownAnimationFunctions threeD_path_easingFunction = KnownAnimationFunctions.CircularEaseIn;

        private KnownAnimationFunctions path_easingFunction = KnownAnimationFunctions.CircularEaseIn;
        //private KnownAnimationFunctions path2_easingFunction = KnownAnimationFunctions.CircularEaseOut;

        private KnownAnimationFunctions continued_path_easingFunction = KnownAnimationFunctions.ExponentialEaseInOut;
        //private KnownAnimationFunctions continued_path2_easingFunction = KnownAnimationFunctions.Liner;

        private bool oneDContinue = true;
        private bool twoDContinue = true;
        private bool threeDContinue = true;



        private Color startColor = Color.DarkSlateGray;
        private Color endColor = Color.Orange;

        private string propertyName = "Value";
        private string colorPropertyName = "BackColor";
        #endregion

        #region Public Properties


        #region 1D Public Properties

        /// <summary>
        /// Gets or sets the start value.
        /// </summary>
        /// <value>The start value.</value>
        [Category("1D Animation")]
        public float StartValue
        {
            get { return path1_start; }
            set
            {
                path1_start = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the end value.
        /// </summary>
        /// <value>The end value.</value>
        [Category("1D Animation")]
        public float EndValue
        {
            get { return path1_end; }
            set
            {
                path1_end = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the duration value.
        /// </summary>
        /// <value>The duration value.</value>
        [Category("1D Animation")]
        public ulong DurationValue
        {
            get { return path1_duration; }
            set
            {
                path1_duration = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the delay value.
        /// </summary>
        /// <value>The delay value.</value>
        [Category("1D Animation")]
        public ulong DelayValue
        {
            get { return path1_delay; }
            set
            {
                path1_delay = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 1D path easing.
        /// </summary>
        /// <value>The 1D path easing.</value>
        [Category("1D Animation")]
        public KnownAnimationFunctions OneD_Path_Easing
        {
            get { return oneD_path_easingFunction; }
            set
            {
                oneD_path_easingFunction = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of the property.
        /// </summary>
        /// <value>The name of the property.</value>
        [Category("1D Animation")]
        public string PropertyName
        {
            get { return propertyName; }
            set
            {
                propertyName = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 1D property.
        /// </summary>
        /// <value>The one d property.</value>
        [Category("1D Animation")]
        public Animator.KnownProperties OneDProperty
        {
            get { return oneDProperty; }
            set
            {
                oneDProperty = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether to continue 1D animation.
        /// </summary>
        /// <value><c>true</c> if 1D continue; otherwise, <c>false</c>.</value>
        [Category("1D Animation")]
        public bool OneD_Continue
        {
            get { return oneDContinue; }
            set
            {
                oneDContinue = value;
                control.Invalidate();
            }
        }
        #endregion


        #region 2D Public Properties
        /// <summary>
        /// Gets or sets the 2D start Path.
        /// </summary>
        /// <value>The 2D start 1 Path.</value>
        [Category("2D Animation")]
        public float Path2D_start_1
        {
            get { return path2D_start_1; }
            set
            {
                path2D_start_1 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D end Path.
        /// </summary>
        /// <value>The 2D end 1 Path.</value>
        [Category("2D Animation")]
        public float Path2D_end_1
        {
            get { return path2D_end_1; }
            set
            {
                path2D_end_1 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D duration.
        /// </summary>
        /// <value>The 2D duration 1.</value>
        [Category("2D Animation")]
        public ulong Path2D_duration_1
        {
            get { return path2D_duration_1; }
            set
            {
                path2D_duration_1 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D delay.
        /// </summary>
        /// <value>The 2D delay 1.</value>
        [Category("2D Animation")]
        public ulong Path2D_delay_1
        {
            get { return path2D_delay_1; }
            set
            {
                path2D_delay_1 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D start Path.
        /// </summary>
        /// <value>The 2D start 2 Path.</value>
        [Category("2D Animation")]
        public float Path2D_start_2
        {
            get { return path2D_start_2; }
            set
            {
                path2D_start_2 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D end Path.
        /// </summary>
        /// <value>The 2D end 2 Path.</value>
        [Category("2D Animation")]
        public float Path2D_end_2
        {
            get { return path2D_end_2; }
            set
            {
                path2D_end_2 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D duration Path.
        /// </summary>
        /// <value>The 2D duration 2 Path.</value>
        [Category("2D Animation")]
        public ulong Path2D_duration_2
        {
            get { return path2D_duration_2; }
            set
            {
                path2D_duration_2 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D delay Path.
        /// </summary>
        /// <value>The 2D delay 2 Path.</value>
        [Category("2D Animation")]
        public ulong Path2D_delay_2
        {
            get { return path2D_delay_2; }
            set
            {
                path2D_delay_2 = value;
                control.Invalidate();
            }
        }


        /// <summary>
        /// Gets or sets the 2D continued start Path.
        /// </summary>
        /// <value>The 2D continued start 1 Path.</value>
        [Category("2D Animation")]
        public float Continued_path2D_start_1
        {
            get { return continued_path2D_start_1; }
            set
            {
                continued_path2D_start_1 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D continued end Path.
        /// </summary>
        /// <value>The 2D continued end 1 Path.</value>
        [Category("2D Animation")]
        public float Continued_path2D_end_1
        {
            get { return continued_path2D_end_1; }
            set
            {
                continued_path2D_end_1 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D continued duration Path.
        /// </summary>
        /// <value>The 2D continued duration 1 Path.</value>
        [Category("2D Animation")]
        public ulong Continued_path2D_duration_1
        {
            get { return continued_path2D_duration_1; }
            set
            {
                continued_path2D_duration_1 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D continued delay Path.
        /// </summary>
        /// <value>The 2D continued delay 1 Path.</value>
        [Category("2D Animation")]
        public ulong Continued_path2D_delay_1
        {
            get { return continued_path2D_delay_1; }
            set
            {
                continued_path2D_delay_1 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D continued start Path.
        /// </summary>
        /// <value>The 2D continued start 2 Path.</value>
        [Category("2D Animation")]
        public float Continued_path2D_start_2
        {
            get { return continued_path2D_start_2; }
            set
            {
                continued_path2D_start_2 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D continued end Path.
        /// </summary>
        /// <value>The 2D continued end 2 Path.</value>
        [Category("2D Animation")]
        public float Continued_path2D_end_2
        {
            get { return continued_path2D_end_2; }
            set
            {
                continued_path2D_end_2 = value;
                control.Invalidate();
            }
        }


        /// <summary>
        /// Gets or sets the 2D continued duration Path.
        /// </summary>
        /// <value>The 2D continued duration 2 Path.</value>
        [Category("2D Animation")]
        public ulong Continued_path2D_duration_2
        {
            get { return continued_path2D_duration_2; }
            set
            {
                continued_path2D_duration_2 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 2D continued delay Path.
        /// </summary>
        /// <value>The 2D continued delay 2 Path.</value>
        [Category("2D Animation")]
        public ulong Continued_path2D_delay_2
        {
            get { return continued_path2D_delay_2; }
            set
            {
                continued_path2D_delay_2 = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets Path Easing.
        /// </summary>
        /// <value>The Path Easing.</value>
        [Category("2D Animation")]
        public KnownAnimationFunctions Path_Easing
        {
            get { return path_easingFunction; }
            set
            {
                path_easingFunction = value;
            }
        }


        //public KnownAnimationFunctions Path2_Easing
        //{
        //    get { return path2_easingFunction; }
        //    set
        //    {
        //        path2_easingFunction = value;
        //    }
        //}

        /// <summary>
        /// Gets or sets the continued path easing.
        /// </summary>
        /// <value>The continued path easing.</value>
        [Category("2D Animation")]
        public KnownAnimationFunctions Continued_Path_Easing
        {
            get { return continued_path_easingFunction; }
            set
            {
                continued_path_easingFunction = value;
            }
        }

        //public KnownAnimationFunctions Continued_Path2_Easing
        //{
        //    get { return continued_path2_easingFunction; }
        //    set
        //    {
        //        continued_path2_easingFunction = value;
        //    }
        //}

        /// <summary>
        /// Gets or sets the 2D property.
        /// </summary>
        /// <value>The 2D property.</value>
        [Category("2D Animation")]
        public Animator2D.KnownProperties TwoDProperty
        {
            get { return twoDProperty; }
            set
            {
                twoDProperty = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether to continue 2D animation.
        /// </summary>
        /// <value><c>true</c> if 2D continue; otherwise, <c>false</c>.</value>
        [Category("2D Animation")]
        public bool TwoDContinue
        {
            get { return twoDContinue; }
            set
            {
                twoDContinue = value;
                control.Invalidate();
            }
        }

        #endregion


        #region 3D Public Properties
        /// <summary>
        /// Gets or sets the 3D start color.
        /// </summary>
        /// <value>The 3D start color.</value>
        [Category("3D Animation")]
        public Color StartColor
        {
            get { return startColor; }
            set
            {
                startColor = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 3D end color.
        /// </summary>
        /// <value>The 3D end color.</value>
        [Category("3D Animation")]
        public Color EndColor
        {
            get { return endColor; }
            set
            {
                endColor = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 3D property.
        /// </summary>
        /// <value>The 3D property.</value>
        [Category("3D Animation")]
        public Animator3D.KnownProperties ThreeDProperty
        {
            get { return threeDProperty; }
            set
            {
                threeDProperty = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether to continue 3D animation.
        /// </summary>
        /// <value><c>true</c> if 3D continue; otherwise, <c>false</c>.</value>
        [Category("3D Animation")]
        public bool ThreeDContinue
        {
            get { return threeDContinue; }
            set
            {
                threeDContinue = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 3D path animation duration.
        /// </summary>
        /// <value>The 3D path animation duration.</value>
        [Category("3D Animation")]
        public ulong Path3_Duration
        {
            get { return path3_duration; }
            set
            {
                path3_duration = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 3D path animation delay.
        /// </summary>
        /// <value>The 3D path animation delay.</value>
        [Category("3D Animation")]
        public ulong Path3_Delay
        {
            get { return path3_delay; }
            set
            {
                path3_delay = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the 3D path easing function.
        /// </summary>
        /// <value>The 3D path easing function.</value>
        [Category("3D Animation")]
        public KnownAnimationFunctions Path3_Easing
        {
            get { return threeD_path_easingFunction; }
            set
            {
                threeD_path_easingFunction = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the name of the 3D color property.
        /// </summary>
        /// <value>The name of the 3D color property.</value>
        [Category("3D Animation")]
        public string ColorPropertyName
        {
            get { return colorPropertyName; }
            set
            {
                colorPropertyName = value;
                control.Invalidate();
            }
        }

        #endregion


        #region General Animation        
        /// <summary>
        /// Gets or sets the control to use for the animation.
        /// </summary>
        /// <value>The control to use.</value>
        [Category("General Animation")]
        public Control Control
        {
            get { return control; }
            set
            {
                control = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the animation mode.
        /// </summary>
        /// <value>The animation mode.</value>
        [Category("General Animation")]
        public animationMode AnimationMode
        {
            get { return _animationMode; }
            set
            {
                _animationMode = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the animation should repeat or not.
        /// </summary>
        /// <value>The repeat.</value>
        [Category("General Animation")]
        public bool Repeat
        {
            get { return repeat; }
            set
            {
                if (value == true)
                {
                    _animator.Repeat = true;
                    _animator2D.Repeat = true;
                    _animator3D.Repeat = true;
                }
                else
                {
                    _animator.Repeat = false;
                    _animator2D.Repeat = false;
                    _animator3D.Repeat = false;

                }
                repeat = value;
                control.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the animation should reverse or not.
        /// </summary>
        /// <value>The reverse.</value>
        [Category("General Animation")]
        public bool Reverse
        {
            get { return reverse; }
            set
            {

                if (value == true)
                {
                    _animator.ReverseRepeat = true;
                    _animator2D.ReverseRepeat = true;
                    _animator3D.ReverseRepeat = true;
                }
                else
                {
                    _animator.ReverseRepeat = false;
                    _animator2D.ReverseRepeat = false;
                    _animator3D.ReverseRepeat = false;
                }

                reverse = value;
                control.Invalidate();
            }
        }

        #endregion


        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="PeaceAnimator"/> class.
        /// </summary>
        public PeaceAnimator()
        {
            _animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));
 
        }

        #endregion

        #region Code
        //public void SetsColor(Color color)
        //{
        //    color = StartColor;

        //    control.BackColor = Color.FromArgb(alpha, color);

        //}


        #endregion

        #region Private Methods

        /// <summary>
        /// Starts the animation.
        /// </summary>
        public void Start()
        {
            switch (_animationMode)
            {
                case animationMode.OneD:

                    #region Old Code
                    //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();


                    //switch (easingFunctionStart)
                    //{
                    //    case KnownAnimationFunctions.None:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.BounceEaseOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.BounceEaseIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.BounceEaseInOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.BounceEaseOutIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.CubicEaseIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.CubicEaseInOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.CubicEaseOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.Liner:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.CircularEaseInOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.CircularEaseIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.CircularEaseOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuadraticEaseIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuadraticEaseOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuadraticEaseInOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuarticEaseIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuarticEaseOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuarticEaseInOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuinticEaseInOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuinticEaseIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.QuinticEaseOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.SinusoidalEaseIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.SinusoidalEaseOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.SinusoidalEaseInOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.ExponentialEaseIn:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.ExponentialEaseOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                    //        break;
                    //    case KnownAnimationFunctions.ExponentialEaseInOut:
                    //        _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                    //        break;
                    //    default:
                    //        break;
                    //} 
                    #endregion

                    switch (oneDProperty)
                    {
                        case Animator.KnownProperties.Value:

                            switch (oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }

                            _animator.Play(control, Animator.KnownProperties.Value);

                            #region Old Code

                            //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay,AnimationFunctions.BounceEaseInOut));

                            //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                            #endregion

                            break;

                        #region Old Code on Text, Caption, BackColor, ForeColor
                        //case Animator.KnownProperties.Text:

                        //    switch (oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(control, Animator.KnownProperties.Text);

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                        //    #endregion

                        //    break;
                        //case Animator.KnownProperties.Caption:

                        //    switch (oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(control, Animator.KnownProperties.Caption);

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                        //    #endregion

                        //    break;
                        //case Animator.KnownProperties.BackColor:

                        //    switch (oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            //_animator.Paths = new Path((float)startColor.A, (float)endColor.B, path1_duration).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            //_animator.Paths = new Path((float)startColor.A, (float)endColor.B, path1_duration).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            //_animator.Paths = new Path((float)startColor.A, (float)endColor.B, path1_duration).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            //_animator.Paths = new Path((float)startColor.A, (float)endColor.B, path1_duration).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    //_animator.Play(new SafeInvoker<Color>(SetsColor, this), "BackColor", new SafeInvoker(End, control));

                        //    _animator.Play(control, Animator.KnownProperties.BackColor);

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay, AnimationFunctions.QuarticEaseInOut));
                        //    //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                        //    //_animator.Play(control, Animator.KnownProperties.BackColor);

                        //    //SafeInvoker<Color> safeColor = new SafeInvoker<Color>(new Action<Color>(SetsColor), control);
                        //    //var prop = control.GetType().GetProperty("BackColor",
                        //    //BindingFlags.IgnoreCase | BindingFlags.Static | BindingFlags.Public | BindingFlags.Instance |
                        //    //BindingFlags.SetProperty);

                        //    //_animator.Play(new SafeInvoker<Color>(
                        //    //value => prop.SetValue(control, Convert.ChangeType(value, prop.PropertyType), null),
                        //    //control), safeColor.ToString());
                        //    //

                        //    //_animator.Play(control, Animator.KnownProperties.BackColor, safeColor);

                        //    #endregion

                        //    break;
                        //case Animator.KnownProperties.ForeColor:

                        //    switch (oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(control, Animator.KnownProperties.ForeColor);

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                        //    #endregion

                        //    break; 
                        #endregion

                        case Animator.KnownProperties.Opacity:

                            switch (oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }


                            _animator.Play(control, Animator.KnownProperties.Opacity);

                            #region Old Code
                            //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                            //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                            #endregion

                            break;

                        case Animator.KnownProperties.Custom:

                            switch (oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }


                            _animator.Play(control, propertyName);

                            #region Testing Code
                            //PropertyInfo propinfo = control.GetType().GetProperty(propertyName, BindingFlags.GetProperty);

                            //var propvalue = propinfo.GetValue(propinfo);

                            //if (propvalue.GetType() == typeof(Int32))
                            //{
                            //    _animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                            //}
                            #endregion

                            #region Old Code
                            //_animator.Paths.Last().Reverse();

                            //_animator.Play(control, propertyName, new SafeInvoker(AutoStop));

                            //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                            #endregion

                            break;

                        case Animator.KnownProperties.Width:

                            switch (oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }

                            _animator.Play(control, "Width");

                            #region Old Code
                            //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                            //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                            #endregion

                            break;

                        case Animator.KnownProperties.Height:

                            switch (oneD_path_easingFunction)
                            {
                                case KnownAnimationFunctions.None:
                                    break;
                                case KnownAnimationFunctions.BounceEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.BounceEaseOutIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CubicEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.Liner:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.CircularEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuadraticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuarticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.QuinticEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.SinusoidalEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseIn:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                case KnownAnimationFunctions.ExponentialEaseInOut:
                                    _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                                    _animator.Paths.Last().Reverse();

                                    break;
                                default:
                                    break;
                            }

                            _animator.Play(control, "Height");

                            #region Old Code
                            //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                            //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                            #endregion

                            break;

                        #region Old Code
                        //case Animator.KnownProperties.Horizontal:

                        //    switch (oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(control, "Point.X");

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                        //    #endregion

                        //    break;

                        //case Animator.KnownProperties.Vertical:

                        //    switch (oneD_path_easingFunction)
                        //    {
                        //        case KnownAnimationFunctions.None:
                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.BounceEaseOutIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.BounceEaseOutIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CubicEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CubicEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.Liner:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.Liner).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.CircularEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.CircularEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuadraticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuadraticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuarticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuarticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.QuinticEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.QuinticEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.SinusoidalEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.SinusoidalEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseIn:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseIn).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        case KnownAnimationFunctions.ExponentialEaseInOut:
                        //            _animator.Paths = new Path(path1_start, path1_end, path1_duration, AnimationFunctions.ExponentialEaseInOut).ToArray();
                        //            _animator.Paths.Last().Reverse();

                        //            break;
                        //        default:
                        //            break;
                        //    }


                        //    _animator.Play(control, "Point.Y");

                        //    #region Old Code
                        //    //_animator = new Animator(new Path(path1_start, path1_end, path1_duration, path1_delay));

                        //    //_animator.Paths = new Path(path1_start, path1_end, path1_duration).ToArray();

                        //    #endregion

                        //    break; 
                        #endregion

                        default:
                            break;
                    }
                    break;

                case animationMode.TwoD:

                    if (twoDContinue)
                    {
                        switch (path_easingFunction)
                        {

                            case KnownAnimationFunctions.None:
                                break;
                            case KnownAnimationFunctions.BounceEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseOutIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CubicEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CubicEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CubicEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.Liner:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CircularEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CircularEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CircularEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.SinusoidalEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.SinusoidalEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.SinusoidalEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                .ContinueTo(new Path2D(
                                    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseOutIn)));

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.BounceEaseOutIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.BounceEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CubicEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CubicEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.Liner),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.CircularEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.CircularEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuadraticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuarticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuarticEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.QuinticEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.QuinticEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseIn),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseIn)));

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut))
                                        .ContinueTo(new Path2D(
                                            new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                            new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.ExponentialEaseOut)));

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            default:
                                break;


                        }

                    }


                    else
                    {
                        switch (path_easingFunction)
                        {

                            case KnownAnimationFunctions.None:
                                break;
                            case KnownAnimationFunctions.BounceEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseOutIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.BounceEaseOutIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.BounceEaseOutIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CubicEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CubicEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CubicEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CubicEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CubicEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.Liner:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.Liner),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.Liner)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.CircularEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CircularEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.CircularEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.CircularEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.CircularEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuadraticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuadraticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuadraticEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuarticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuarticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuarticEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.QuinticEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.QuinticEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.QuinticEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }

                                break;
                            case KnownAnimationFunctions.SinusoidalEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.SinusoidalEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.SinusoidalEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.SinusoidalEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.SinusoidalEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseIn:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseIn),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseInOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseIn)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            case KnownAnimationFunctions.ExponentialEaseInOut:
                                _animator2D.Paths = new Path2D(
                                new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                switch (continued_path_easingFunction)
                                {
                                    case KnownAnimationFunctions.None:
                                        break;
                                    case KnownAnimationFunctions.BounceEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.BounceEaseOutIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CubicEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.Liner:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.CircularEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuadraticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuarticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.QuinticEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.SinusoidalEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseIn:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),

                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    case KnownAnimationFunctions.ExponentialEaseInOut:
                                        _animator2D.Paths = new Path2D(
                                        new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                                        new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.ExponentialEaseOut)).ToArray();

                                        break;
                                    default:
                                        break;
                                }


                                break;
                            default:
                                break;


                        }
                    }

                    #region Old Code
                    //_animator2D.Paths = new Path2D(
                    //new Path(path2D_start_1, path2D_end_1, path2D_duration_1, path2D_delay_1 , AnimationFunctions.BounceEaseInOut),

                    //new Path(path2D_start_2, path2D_end_2, path2D_duration_2, path2D_delay_2, AnimationFunctions.BounceEaseIn))
                    //.ContinueTo(new Path2D(
                    //    new Path(continued_path2D_start_1, continued_path2D_end_1, continued_path2D_duration_1, continued_path2D_delay_1, AnimationFunctions.ExponentialEaseInOut),
                    //    new Path(continued_path2D_start_2, continued_path2D_end_2, continued_path2D_duration_2, continued_path2D_delay_2, AnimationFunctions.Liner)));

                    #endregion

                    switch (twoDProperty)
                    {
                        case Animator2D.KnownProperties.Size:
                            _animator2D.Play(control, Animator2D.KnownProperties.Size);
                            break;
                        case Animator2D.KnownProperties.Location:
                            _animator2D.Play(control, Animator2D.KnownProperties.Location);
                            break;
                        default:
                            break;
                    }

                    break;
                case animationMode.ThreeD:

                    _animator3D.Stop();

                    switch (threeD_path_easingFunction)
                    {
                        case KnownAnimationFunctions.None:
                            break;
                        case KnownAnimationFunctions.BounceEaseOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.BounceEaseOut).ToArray();
                            break;
                        case KnownAnimationFunctions.BounceEaseIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.BounceEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.BounceEaseInOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.BounceEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.BounceEaseOutIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.BounceEaseOutIn).ToArray();

                            break;
                        case KnownAnimationFunctions.CubicEaseIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.CubicEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.CubicEaseInOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.CubicEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.CubicEaseOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.CubicEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.Liner:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.Liner).ToArray();

                            break;
                        case KnownAnimationFunctions.CircularEaseInOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.CircularEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.CircularEaseIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.CircularEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.CircularEaseOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.CircularEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuadraticEaseIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuadraticEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.QuadraticEaseOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuadraticEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuadraticEaseInOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuadraticEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuarticEaseIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuarticEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.QuarticEaseOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuarticEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuarticEaseInOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuarticEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuinticEaseInOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuinticEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.QuinticEaseIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuinticEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.QuinticEaseOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.QuinticEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.SinusoidalEaseIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.SinusoidalEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.SinusoidalEaseOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.SinusoidalEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.SinusoidalEaseInOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.SinusoidalEaseInOut).ToArray();

                            break;
                        case KnownAnimationFunctions.ExponentialEaseIn:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.ExponentialEaseIn).ToArray();

                            break;
                        case KnownAnimationFunctions.ExponentialEaseOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.ExponentialEaseOut).ToArray();

                            break;
                        case KnownAnimationFunctions.ExponentialEaseInOut:
                            _animator3D.Paths =
                                new Path3D(startColor.ToFloat3D(), endColor.ToFloat3D(), path3_duration, path3_delay, AnimationFunctions.ExponentialEaseInOut).ToArray();

                            break;
                        default:
                            break;
                    }


                    switch (threeDProperty)
                    {
                        case Animator3D.KnownProperties.BackColor:
                            _animator3D.Play(control, Animator3D.KnownProperties.BackColor, new SafeInvoker(() =>
                            {
                                _animator3D.Paths = _animator3D.Paths.Last().Reverse().ToArray();
                                _animator3D.Play(control, Animator3D.KnownProperties.BackColor);
                            }));
                            break;
                        case Animator3D.KnownProperties.ForeColor:
                            _animator3D.Play(control, Animator3D.KnownProperties.ForeColor, new SafeInvoker(() =>
                            {
                                _animator3D.Paths = _animator3D.Paths.Last().Reverse().ToArray();
                                _animator3D.Play(control, Animator3D.KnownProperties.ForeColor);
                            }));
                            break;

                        case Animator3D.KnownProperties.Custom:
                            _animator3D.Play(control, colorPropertyName, new SafeInvoker(() =>
                            {
                                _animator3D.Paths = _animator3D.Paths.Last().Reverse().ToArray();
                                _animator3D.Play(control, colorPropertyName);
                            }));
                            break;
                                                    
                        default:
                            break;
                    }

                    break;
                //case animationMode.Other:
                //    break;
                default:
                    break;
            }

        }

        /// <summary>
        /// Stops the animation.
        /// </summary>
        public void Stop()
        {
            _animator.Stop();
            _animator2D.Stop();
            _animator3D.Stop();
        }

        /// <summary>
        /// Pauses the animation.
        /// </summary>
        public void Pause()
        {
            _animator.Pause();
            _animator2D.Pause();
            _animator3D.Pause();
        }

        /// <summary>
        /// Resumes the animation.
        /// </summary>
        public void Resume()
        {
            _animator.Resume();
            _animator2D.Resume();
            _animator3D.Resume();
        }

        /// <summary>
        /// Automatically stop the animation.
        /// </summary>
        public void AutoStop()
        {
            #region Testing Code
            //PropertyInfo propinfo = control.GetType().GetProperty(propertyName, BindingFlags.GetProperty);

            //int propvalue = (int)GetPropValue(control,propertyName);



            //float propvalue = GetPropertiesValue<float>(control, propertyName);

            //if(propvalue == 100)
            //{
            //    propvalue = 0;
            //    propvalue++;
            //}

            //propvalue = propvalue - propvalue;

            //if (propvalue.GetType() == typeof(Int32))
            //{
            //    //int values = Convert.ToInt32(propvalue);

            //    //values = values-values;

            //    propvalue = propvalue - propvalue;


            //}
            #endregion

            int propvalue = GetPropertiesValue<int>(control, propertyName);
            if (propvalue == path1_end)
            {

                propvalue--;
                control.Invalidate();
            }


            // Get the type and PropertyInfo.
            Type myType = control.GetType();
            PropertyInfo pinfo = myType.GetProperty(propertyName);

            //pinfo.GetValue(control, null);

            pinfo.SetValue(control, 20);
        }

        public static object GetPropValue(object src, string propName)
        {
            return src.GetType().GetProperty(propName).GetValue(src, null);
        }

        public static Object GetPropertiesValue(Object obj, String name)
        {
            foreach (String part in name.Split('.'))
            {
                if (obj == null) { return null; }

                Type type = obj.GetType();
                PropertyInfo info = type.GetProperty(part);
                if (info == null) { return null; }

                obj = info.GetValue(obj, null);
            }
            return obj;
        }

        public T GetPropertiesValue<T>(Object obj, String name)
        {
            Object retval = GetPropValue(obj, name);
            if (retval == null) { return default(T); }

            // throws InvalidCastException if types are incompatible
            return (T)retval;

            //DateTime now = DateTime.Now;
            //int min = GetPropertyValue<int>(now, "TimeOfDay.Minutes");
            //int hrs = now.GetPropertyValue<int>("TimeOfDay.Hours");
        }

        //public static implicit operator Color(float float3D)
        //{
        //    return Color.FromArgb((int)float3D.X, (int)float3D.Y, (int)float3D.Z);
        //}

        //public static float FromColor(Color color)
        //{
        //    return new Float3D(color.R, color.G, color.B);
        //}


        #endregion

        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        protected override void Dispose(bool disposing)
        {
            this.Stop();
            _animator.Stop();
            _animator2D.Stop();
            _animator3D.Stop();
            
            if (disposing && (components != null))
            {
                components.Dispose();
            }

            base.Dispose(disposing);


        }

    }
}
