<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zeroit.Framework.FormEditors</name>
    </assembly>
    <members>
        <member name="T:Zeroit.Framework.FormEditors.CatColorPicker">
            <summary>
            	Base class for a categorized color picker control.
            </summary>
            <remarks>
            	Colors are categorized into color groups, represented by the <c>ColorGroup</c> class.
            	For each group, the group title is displayed, followed by each of the colors in the group.
            	Each color is displayed in a color box followed by the name of the color.
            	The groups can optionally be displayed using multiple columns.
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.#ctor">
            <summary>
            	Constructor with no starting color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.#ctor(System.Drawing.Color)">
            <summary>
            	Constructor with starting color.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CatColorPicker.Color">
            <summary>
            	Gets the current selected color.
            </summary>
            <value>
            	Current selected color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CatColorPicker.ColorName">
            <summary>
            	Gets the name of current selected color.
            </summary>
            <value>
            	Name of current selected color.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.SetColor(System.Drawing.Color)">
            <summary>
            	Set current selected color.
            </summary>
            <param name="color">Current color.</param>
            <returns><c>True</c> if <c>color</c> exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CatColorPicker.TitleFont">
            <summary>
            	Gets or sets the font to be used for group titles.
            </summary>
            <value>
                Group title text font.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CatColorPicker.TitleColor">
            <summary>
            	Gets or sets the color to be used for group titles.
            </summary>
            <value>
            	Group title text color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CatColorPicker.ColorFont">
            <summary>
            	Gets or sets the font to be used for color names.
            </summary>
            <value>
            	Color name text font.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CatColorPicker.ColorBoxWidth">
            <summary>
            	Gets or sets the pixel width of the color box.
            	The color box is displayed beside the color name.
            </summary>
            <value>
            	Pixel width of color box.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CatColorPicker.ColorBoxOffset">
            <summary>
            	Gets or set the color box pixel offset.
            	This is the number of pixels of space on all sides of the color box.
            </summary>
            <value>
            	Color box pixel offset.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.AddColorGroup(Zeroit.Framework.FormEditors.ColorGroup)">
            <summary>
            	Add color group.
            	Intended to be called by the derived class from within an overridden <c>SplitColorGroups</c>.
            </summary>
            <param name="colorGroup"><c>ColorGroup</c> object to add.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.GenerateColorGroups">
            <summary>
            	Generate array of color groups.
            	Implemented by derived class.
            </summary>
            <returns>Array of <c>ColorGroup</c> objects.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.GetMaxColumnCount">
            <summary>
            	Return maximum number of columns which may be displayed.
            </summary>
            <returns>Maximum number of columns which may be displayed.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.SplitColorGroups(Zeroit.Framework.FormEditors.ColorGroup[][])">
            <summary>
            	Return organization of color groups for a particular number of display columns.
            	<para>
            	The number of columns is <c>groups.Length</c>.
            	The derived class must allocate the <c>ColorGroup</c> arrays for each column index,
            	and then call <c>AddColorGroup</c> to add each group in order.
            	</para>
            </summary>
            <remarks>
            	REALLY need an example!
            </remarks>
            <param name="groups">Array of arrays of <c>ColorGroup</c> objects.</param>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.CatColorPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CatColorPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.ColorGroup">
            <summary>
            	Class representing a color group.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGroup.#ctor(System.String)">
            <summary>
            	Constructor with title.
            </summary>
            <param name="title">Title of color group.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGroup.Title">
            <summary>
            	Gets the title of this color group.
            </summary>
            <value>
            	Title of this color group.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGroup.Add(System.Drawing.Color)">
            <summary>
            	Add color to this group.
            </summary>
            <param name="color">Color to add.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGroup.Colors">
            <summary>
            	Gets the current array of colors in this group.
            </summary>
            <value>
            	Array of colors in this group.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGroup.ToString">
            <summary>
            	Returns a string representation of this color group.
            </summary>
            <returns>Display string.</returns>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog">
            <summary>
            	Implements a dialog which allows design and editing of a <c>BrushPainter2</c> object.
            	May be used in designer.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog.#ctor">
            <summary>
            	Initializes a new instance of <c>BrushPainter2EditorDialog</c> using an empty <c>BrushPainter2</c>
            	at the default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog.#ctor(Zeroit.Framework.FormEditors.BrushPainter2)">
            <summary>
            	Initializes a new instance of <c>BrushPainter2EditorDialog</c> using an existing <c>BrushPainter2</c>
            	at the default window position.
            </summary>
            <param name="filler">Existing <c>BrushPainter2</c> object.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="filler" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
            	Initializes a new instance of <c>BrushPainter2EditorDialog</c> using an empty <c>BrushPainter2</c>
            	and positioned beneath the specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog.#ctor(Zeroit.Framework.FormEditors.BrushPainter2,System.Windows.Forms.Control)">
            <summary>
            	Initializes a new instance of <c>BrushPainter2EditorDialog</c> using an existing <c>BrushPainter2</c>
            	and positioned beneath the specified control.
            </summary>
            <param name="filler">Existing <c>BrushPainter2</c> object.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="filler" /> is null.
            </exception>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog.BrushPainter">
            <summary>
            	Gets current filler.
            </summary>
            <value>
            	Current filler.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2EditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Editor">
            <summary>
                The <c>UITypeEditor</c> derived class which indicates how a <c>BrushPainter2</c>
                object can be edited directly from Visual Studio Designer.
            </summary>
            <remarks>
                Note that this class is <b>NOT</b> meant to be invoked directly
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Editor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>UITypeEditorEditStyle.Modal</c></returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Editor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
                Creates and displays a <c>BrushPainter2EditorDialog</c> dialog if <c>value</c> is a <c>BrushPainter2</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider through which editing services may be obtained.</param>
            <param name="value">An instance of <c>BrushPainter2</c> being edited.</param>
            <returns>The new value of the <c>BrushPainter2</c> being edited.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Editor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Indicates that painting is supported.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Editor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
                Paint a representation of the simple filler (usually in designer).
            </summary>
            <param name="e">A <c>PaintValueEventArgs</c> that indicates what to paint and where to paint it.</param>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog">
            <summary>
            	Implements a dialog which allows design and editing of a <c>BrushPainter</c> object.
            	May be used in designer.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog.#ctor">
            <summary>
            	Initializes a new instance of <c>BrushPainterEditorDialog</c> using an empty <c>BrushPainter</c>
            	at the default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog.#ctor(Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter)">
            <summary>
            	Initializes a new instance of <c>BrushPainterEditorDialog</c> using an existing <c>BrushPainter</c>
            	at the default window position.
            </summary>
            <param name="filler">Existing <c>BrushPainter</c> object.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="filler" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
            	Initializes a new instance of <c>BrushPainterEditorDialog</c> using an empty <c>BrushPainter</c>
            	and positioned beneath the specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog.#ctor(Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter,System.Windows.Forms.Control)">
            <summary>
            	Initializes a new instance of <c>BrushPainterEditorDialog</c> using an existing <c>BrushPainter</c>
            	and positioned beneath the specified control.
            </summary>
            <param name="filler">Existing <c>BrushPainter</c> object.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="filler" /> is null.
            </exception>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog.BrushPainter">
            <summary>
            	Gets current filler.
            </summary>
            <value>
            	Current filler.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditor">
            <summary>
                The <c>UITypeEditor</c> derived class which indicates how a <c>BrushPainter</c>
                object can be edited directly from Visual Studio Designer.
            </summary>
            <remarks>
                Note that this class is <b>NOT</b> meant to be invoked directly
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>UITypeEditorEditStyle.Modal</c></returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
                Creates and displays a <c>BrushPainterEditorDialog</c> dialog if <c>value</c> is a <c>BrushPainter</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider through which editing services may be obtained.</param>
            <param name="value">An instance of <c>BrushPainter</c> being edited.</param>
            <returns>The new value of the <c>BrushPainter</c> being edited.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Indicates that painting is supported.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
                Paint a representation of the simple filler (usually in designer).
            </summary>
            <param name="e">A <c>PaintValueEventArgs</c> that indicates what to paint and where to paint it.</param>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterType">
            <summary>
            	Specifies the type of fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterType.None">
            <summary>
            	Specifies no fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterType.Solid">
            <summary>
            	Specifies a solid fill in a single color.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterType.Hatch">
            <summary>
            	Specifies a hatched fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterType.LinearGradient">
            <summary>
            	Specifies a color gradient fill in a fixed direction.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterType.PathGradient">
            <summary>
            	Specifies a color gradient fill which radiates out from a center point.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPathGradientType">
            <summary>
                Specifies the type of path gradient fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPathGradientType.Rect">
            <summary>
            	Specifies a color gradient fill radiation out from a center point in a rectangular shape.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPathGradientType.Radial">
            <summary>
            	Specifies a color gradient fill radiation out from a center point in a elliptical shape.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter">
            <summary>
            	Class representing a solid, hatched, or gradient fill.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor">
            <summary>
            	Constructor for no fill.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor(System.Drawing.Color)">
            <summary>
            	Constructor for solid fill.
            </summary>
            <param name="solidColor">Fill color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for hatched fill.
            </summary>
            <param name="hatchStyle">A <c>System.Drawing.Drawing2D.HatchStyle</c> enumeration value that specifies the style of hatching.</param>
            <param name="hatchColor">Hatch lines color.</param>
            <param name="backColor">Background color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor(System.Single,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for a two color linear gradient fill.
            </summary>
            <param name="linearGradientAngle">Angle of gradient.</param>
            <param name="startColor">Starting color.</param>
            <param name="endColor">Ending color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor(System.Single,System.Drawing.Color[],System.Single[])">
            <summary>
            	Constructor for a multi color linear gradient fill.
            </summary>
            <param name="linearGradientAngle">Angle of gradient.</param>
            <param name="colors">Array of colors to use at corresponding positions along the gradient.</param>
            <param name="positions">Array of positions along the gradient.</param>
            <remarks>
            	Refer to the documentation of <c>System.Drawing.Drawing2D.ColorBlend</c> for more information about <c>colors</c> and <c>positions</c>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="colors" /> or <paramref name="positions" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor(System.Single,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            	Constructor for a multi color linear gradient fill.
            </summary>
            <param name="linearGradientAngle">Angle of gradient.</param>
            <param name="gradientColors">A <c>System.Drawing.Drawing2D.ColorBlend</c> object containing arrays of colors and positions defining a multi color gradient.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="gradientColors" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor(Zeroit.Framework.FormEditors.Editors.Brushes.BrushPathGradientType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for a two color path gradient fill.
            </summary>
            <param name="pathGradientType">Type of path gradient.</param>
            <param name="startColor">Starting color.</param>
            <param name="endColor">Ending color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor(Zeroit.Framework.FormEditors.Editors.Brushes.BrushPathGradientType,System.Drawing.Color[],System.Single[])">
            <summary>
            	Constructor for a multi color path gradient fill.
            </summary>
            <param name="pathGradientType">Type of path gradient.</param>
            <param name="colors">Array of colors to use at corresponding positions along the gradient.</param>
            <param name="positions">Array of positions along the gradient.</param>
            <remarks>
            	Refer to the documentation of <c>System.Drawing.Drawing2D.ColorBlend</c> for more information about <c>colors</c> and <c>positions</c>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="colors" /> or <paramref name="positions" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.#ctor(Zeroit.Framework.FormEditors.Editors.Brushes.BrushPathGradientType,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            	Constructor for a multi color path gradient fill.
            </summary>
            <param name="pathGradientType">Type of path gradient.</param>
            <param name="gradientColors">A <c>System.Drawing.Drawing2D.ColorBlend</c> object containing arrays of colors and positions defining a multi color gradient.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="gradientColors" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.Clone">
            <summary>
                Creates an exact copy of this <c>BrushPainter</c>.
            </summary>
            <returns>A <c>BrushPainter</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.Empty">
            <summary>
            	No fill constructor.	
            </summary>
            <returns><c>BrushPainter</c> no-fill object.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.FillType">
            <summary>
            	Type of fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.HatchStyle">
            <summary>
            	Hatch style in a hatched fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.LinearGradientAngle">
            <summary>
            	Direction of gradient fill if <c>FillType</c> is <c>LinearGradient</c>.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.BrushPathGradientType">
            <summary>
            	Type of path gradient fill if <c>FillType</c> is <c>PathGradient</c>.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.GradientColors">
            <summary>
            	Color blend for a linear or path gradient fill.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.SolidColor">
            <summary>
            	Gets foreground color in a solid fill.
            </summary>
            <value>
            	Foreground color in a solid fill.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.HatchColor">
            <summary>
            	Gets foreground color in a hatched fill.
            </summary>
            <value>
            	Foreground color in a hatched fill.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.BackColor">
            <summary>
            	Gets background color in a hatched fill.
            </summary>
            <value>
            	Background color in a hatched fill.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.GetBrush(System.Drawing.Rectangle)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>BrushPainterType</c> is <c>LinearGradient</c> or <c>PathGradient</c>.
                <para>
                The caller is responsible for disposing of the returned brush.
                </para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.GetBrush(System.Drawing.RectangleF)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>BrushPainterType</c> is <c>LinearGradient</c> or <c>PathGradient</c>.
                <para>
                The caller is responsible for disposing of the returned brush.
                </para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter.GetBrush(System.Drawing.Rectangle,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>BrushPainterType</c> is <c>LinearGradient</c> or <c>PathGradient</c>.
                <para>
                The caller is responsible for disposing of the returned brush.
                </para>
            </remarks>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Panel">
            <summary>
            	Represents a control for displaying a <c>BrushPainter2</c> value.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Panel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Panel.BrushPainter">
            <summary>
                Gets or sets the simple filler.
            </summary>
            <value>
                The simple filler.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Panel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Panel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainter2Panel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterPanel">
            <summary>
            	Represents a control for displaying a <c>BrushPainter</c> value.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterPanel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterPanel.BrushPainter">
            <summary>
                Gets or sets the simple filler.
            </summary>
            <value>
                The simple filler.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.Brushes.BrushPainterPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.#ctor">
            <summary>
                Constructor with no starting color blend and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.#ctor(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
                Constructor with starting color blend and default window position.
            </summary>
            <param name="blend">Starting color blend.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor with no starting color gradient and starting position beneath specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.#ctor(System.Drawing.Drawing2D.ColorBlend,System.Windows.Forms.Control)">
            <summary>
                Constructor with starting color blend and starting position beneath specified control.
            </summary>
            <param name="blend">Starting color blend.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.#ctor(System.Drawing.Point)">
            <summary>
                Consructor with no starting color blend and starting position.
            </summary>
            <param name="p">Starting position.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.#ctor(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Point)">
            <summary>
                Constructor with starting color blend and starting position.
            </summary>
            <param name="blend">Starting color blend.</param>
            <param name="p">Starting position.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.Blend">
            <summary>
                Gets or sets current color blend.
            </summary>
            <value>
                Current color blend.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ColorGradientEditor.ColorGradientEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPicker.#ctor">
            <summary>
            	Constructor with no starting color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPicker.#ctor(System.Drawing.Color)">
            <summary>
            	Constructor with starting color.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPicker.SetColor(System.Drawing.Color)">
            <summary>
            	Set current selected color.
            </summary>
            <param name="color">Current color.</param>
            <returns><c>True</c>.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.#ctor">
            <summary>
                Constructor with no starting color and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.#ctor(System.Drawing.Color)">
            <summary>
                Constructor with starting color and default window position.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor with no starting color and starting position beneath specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.#ctor(System.Drawing.Color,System.Windows.Forms.Control)">
            <summary>
                Constructor with starting color and starting position beneath specified control.
            </summary>
            <param name="color">Starting color.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.#ctor(System.Drawing.Point)">
            <summary>
                Consructor with no starting color and starting position.
            </summary>
            <param name="p">Starting position.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.#ctor(System.Drawing.Color,System.Drawing.Point)">
            <summary>
                Constructor with starting color and starting position.
            </summary>
            <param name="color">Starting color.</param>
            <param name="p">Starting position.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.Color">
            <summary>
                Gets or sets selected color.
            </summary>
            <value>
                Selected color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.ColorName">
            <summary>
                Gets name of selected color.
            </summary>
            <value>
                Name of selected color.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
                Override to capture Esc key.
            </summary>
            <param name="keyCode">Key.</param>
            <returns><c>True</c> if key handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.ComboColorPicker.ComboColorPickerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter">
            <summary>
                Class representing a line of any color, thickness, and dash style.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.#ctor(System.Drawing.Color)">
            <summary>
                Constructor for a solid line of width 1.
            </summary>
            <param name="color">PenPainter color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.#ctor(System.Drawing.Color,System.Single)">
            <summary>
                Constructor for a aolid line of any color and width.
            </summary>
            <param name="color">PenPainter color.</param>
            <param name="width">Width in pixels.  A value of zero or less indicates an empty line.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.#ctor(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>
                Constructor for a line of any color, width and dashstyle.
            </summary>
            <param name="color">PenPainter color.</param>
            <param name="width">Width in pixels.  A value of zero or less indicates an empty line.</param>
            <param name="dashStyle">Dashstyle.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.#ctor(System.Drawing.Color,System.Single,System.Single[])">
            <summary>
                Constructor for a line with a custom dash pattern.
            </summary>
            <param name="color">PenPainter color.</param>
            <param name="width">Width in pixels.  A value of zero or less indicates an empty line.</param>
            <param name="dashPattern">An array of real numbers that specifies the lengths of alternating dashes and spaces.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.#ctor(Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter)">
            <summary>
                Constructor for a line from another line.
            </summary>
            <param name="other"><c>PenPainter</c> to copy.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.Empty">
            <summary>
            	Constructs an empty line.
            </summary>
            <returns>A <c>PenPainter</c> with color <c>Color.Empty</c> and zero width.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.Clone">
            <summary>
                Creates an exact copy of this <c>PenPainter</c>.
            </summary>
            <returns>A <c>PenPainter</c>.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.Color">
            <summary>
                PenPainter color.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.Width">
            <summary>
                PenPainter width (in pixels).
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.DashStyle">
            <summary>
                Dashstyle.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.DashPattern">
            <summary>
                Dash pattern.  Is <c>null</c> unless <c>DashStyle</c> is <c>DashStyle.Custom</c>.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.IsEmpty">
            <summary>
            	<c>True</c> if empty, false otherwise.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter.GetPen">
            <summary>
                Get pen for this line.
            </summary>
            <returns>Pen.</returns>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterPanel">
            <summary>
            	Represents a control for displaying a line.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterPanel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterPanel.PenPainter">
            <summary>
                Get line displayed in panel.
            </summary>
            <value>
                PenPainter displayed in panel.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterPanel.Orientation">
            <summary>
                Get display orientation of line.
            </summary>
            <value>
                Display orientation of line.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog">
            <summary>
                Implements a dialog which allows design and editing of a <c>PenPainter</c> object.
            	May be used in designer.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog.#ctor">
            <summary>
                Initializes a new instance of <c>PenPainterEditorDialog</c> with a default <c>PenPainter</c>
                and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog.#ctor(Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter)">
            <summary>
                Initializes a new instance of <c>PenPainterEditorDialog</c> using an existing <c>PenPainter</c>
                and default window position.
            </summary>
            <param name="line">Existing <c>PenPainter</c>.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Initializes a new instance of <c>PenPainterEditorDialog</c> with a default <c>PenPainter</c>
                and starting beneath a specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog.#ctor(Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainter,System.Windows.Forms.Control)">
            <summary>
                Initializes a new instance of <c>PenPainterEditorDialog</c> using an existing <c>PenPainter</c>
                and starting beneath a specified control.
            </summary>
            <param name="line">Existing <c>PenPainter</c>.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog.PenPainter">
            <summary>
                Gets the line selected by the user.
            </summary>
            <value>
            	The line selected by the user.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditor">
            <summary>
                The <c>UITypeEditor</c> derived class which indicates how a <c>PenPainter</c>
                object can be edited directly from Visual Studio Designer.
            </summary>
            <remarks>
                Note that this class is <b>NOT</b> meant to be invoked directly
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>UITypeEditorEditStyle.Modal</c></returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
                Creates and displays a <c>PenPainterEditorDialog</c> dialog if <c>value</c> is a <c>PenPainter</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider through which editing services may be obtained.</param>
            <param name="value">An instance of <c>PenPainter</c> being edited.</param>
            <returns>The new value of the <c>PenPainter</c> being edited.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Indicates that painting is supported.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PenPainter.PenPainterEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
                Paint a representation of the line (usually in designer).
            </summary>
            <param name="e">A <c>PaintValueEventArgs</c> that indicates what to paint and where to paint it.</param>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon">
            <summary>
            	Class representing a polygon.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.#ctor">
            <summary>
                Constructor for an empty polygon.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.#ctor(System.Drawing.PointF[])">
            <summary>
                Constructor for a polygon from an array of points.
            </summary>
            <param name="points">Array of points.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.#ctor(System.Single[],System.Single[])">
            <summary>
                Constructor for a polygon from separate arrays of x and y coordinates.
            </summary>
            <param name="x">Array of x coordinates.</param>
            <param name="y">Array of y coordinates.</param>
            <exception cref="T:System.ArgumentException">One of <c>x</c> or <c>y</c> is <c>null</c>,
                           or both <c>x</c> and <c>y</c> are not <c>null</c> but have different lengths.</exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.#ctor(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
                Constructor for a polygon from a list of points.
            </summary>
            <param name="list">List of points.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.#ctor(Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon)">
            <summary>
                Constructor for a polygon from another instance of <c>Polygon</c>.
            </summary>
            <param name="other">Other instance of <c>Polygon</c>.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.Clone">
            <summary>
                Creates an exact copy of this <c>Polygon</c>.
            </summary>
            <returns>A new <c>Polygon</c> object.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.Add(System.Drawing.PointF)">
            <summary>
                Add point to polygon.
            </summary>
            <param name="point">Point to add.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.RemoveAt(System.Int32)">
            <summary>
                Remove point from polygon.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is less than 0 or
                            <c>index</c> is equal or greater than <c>Count</c>.</exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.Clear">
            <summary>
                Delete existing points.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.Count">
            <summary>
                Gets the number of points in the polygon.
            </summary>
            <value>
                The number of points in the polygon.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.Item(System.Int32)">
            <summary>
                Gets the point at the specified index.
            </summary>
            <value>
                The point at the specified index.
            </value>
            <param name="index">The zero-based index of the point to get.</param>
            <returns>The point at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is less than 0 or
                            <c>index</c> is equal or greater than <c>Count</c>.</exception>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.Points">
            <summary>
                Gets an array containing copies of the points.
            </summary>
            <value>
                An array containing copies of the points.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.X">
            <summary>
                Gets and array containing copies of the X coordinates.
            </summary>
            <value>
                An array containing copies of the X coordinates.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon.Y">
            <summary>
                Gets and array containing copies of the Y coordinates.
            </summary>
            <value>
                An array containing copies of the Y coordinates.
            </value>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog">
            <summary>
                Implements a dialog which allows design and editing of a <c>Polygon</c> object.
            	May be used in designer.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog.#ctor">
            <summary>
                Initializes a new instance of <c>PolygonEditorDialog</c> with an empty polygon
                and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog.#ctor(Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon)">
            <summary>
                Initializes a new instance of <c>PolygonEditorDialog</c> using an existing polygon
                and default window position.
            </summary>
            <param name="poly">Existing <c>Polygon</c>.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Initializes a new instance of <c>PolygonEditorDialog</c> with an empty polygon
                and starting beneath a specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog.#ctor(Zeroit.Framework.FormEditors.Editors.PolyEditor.Polygon,System.Windows.Forms.Control)">
            <summary>
                Initializes a new instance of <c>PolygonEditorDialog</c> using an existing polygon
                and starting beneath a specified control.
            </summary>
            <param name="poly">Existing <c>Polygon</c>.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog.Polygon">
            <summary>
                Gets the polygon designed by the user.
            </summary>
            <value>
                The polygon designed by the user.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditor">
            <summary>
                The <c>UITypeEditor</c> derived class which indicates how a <c>Polygon</c>
                object can be edited directly from Visual Studio Designer.
            </summary>
            <remarks>
                Note that this class is <b>NOT</b> meant to be invoked directly.
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>UITypeEditorEditStyle.Modal</c></returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Editors.PolyEditor.PolygonEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
                Creates and displays a <c>PolygonEditorDialog</c> dialog if <c>value</c> is a <c>Polygon</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider through which editing services may be obtained.</param>
            <param name="value">An instance of <c>Polygon</c> being edited.</param>
            <returns>The new value of the <c>Polygon</c> being edited.</returns>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.BrushPainter2Type">
            <summary>
            	Specifies the type of fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.BrushPainter2Type.None">
            <summary>
            	Specifies no fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.BrushPainter2Type.Solid">
            <summary>
            	Specifies a solid fill in a single color.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.BrushPainter2Type.Hatch">
            <summary>
            	Specifies a hatched fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.BrushPainter2Type.Gradient">
            <summary>
            	Specifies a color gradient fill.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.BrushPainter2">
            <summary>
            	Class representing a solid, hatched, or gradient fill.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.#ctor">
            <summary>
            	Constructor for no fill.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.#ctor(System.Drawing.Color)">
            <summary>
            	Constructor for solid fill.
            </summary>
            <param name="solidColor">Fill color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for hatched fill.
            </summary>
            <param name="hatchStyle">A <c>System.Drawing.Drawing2D.HatchStyle</c> enumeration value that specifies the style of hatching.</param>
            <param name="hatchColor">Hatch lines color.</param>
            <param name="backColor">Background color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for a two color gradient fill.
            </summary>
            <param name="startColor">Starting color.</param>
            <param name="endColor">Ending color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.#ctor(System.Drawing.Color[],System.Single[])">
            <summary>
            	Constructor for a multi color gradient fill.
            </summary>
            <param name="colors">Array of colors to use at corresponding positions along the gradient.</param>
            <param name="positions">Array of positions along the gradient.</param>
            <remarks>
            	Refer to the documentation of <c>System.Drawing.Drawing2D.ColorBlend</c> for more information about <c>colors</c> and <c>positions</c>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="colors" /> or <paramref name="positions" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.#ctor(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            	Constructor for a multi color gradient fill.
            </summary>
            <param name="gradientColors">A <c>System.Drawing.Drawing2D.ColorBlend</c> object containing arrays of colors and positions defining a multi color gradient.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="gradientColors" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.Clone">
            <summary>
                Creates an exact copy of this <c>BrushPainter2</c>.
            </summary>
            <returns>A <c>BrushPainter2</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.Empty">
            <summary>
            	No fill constructor.	
            </summary>
            <returns><c>BrushPainter2</c> no-fill object.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.BrushPainter2.FillType">
            <summary>
            	Type of fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.BrushPainter2.HatchStyle">
            <summary>
            	Hatch style in a hatched fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.BrushPainter2.GradientColors">
            <summary>
            	Color blend for a linear or path gradient fill.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.BrushPainter2.SolidColor">
            <summary>
            	Gets foreground color in a solid fill.
            </summary>
            <value>
            	Foreground color in a solid fill.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.BrushPainter2.HatchColor">
            <summary>
            	Gets foreground color in a hatched fill.
            </summary>
            <value>
            	Foreground color in a hatched fill.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.BrushPainter2.BackColor">
            <summary>
            	Gets background color in a hatched fill.
            </summary>
            <value>
            	Background color in a hatched fill.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.GetBrush(System.Drawing.Point,System.Drawing.Point)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="p1">Starting point of gradient.</param>
            <param name="p2">Ending point of gradient.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>p1</c> and <c>p2</c> parameters only affect the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.GetBrush(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="p1">Starting point of gradient.</param>
            <param name="p2">Ending point of gradient.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>p1</c> and <c>p2</c> parameters only affect the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.GetBrush(System.Drawing.Rectangle)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.GetBrush(System.Drawing.Rectangle,System.Single)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <param name="angle">The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> and <c>angle</c> parameters only affect the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.GetBrush(System.Drawing.RectangleF)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>BrushPainter2Type</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BrushPainter2.GetBrush(System.Drawing.RectangleF,System.Single)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <param name="angle">The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> and <c>angle</c> parameters only affect the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Filler2Type">
            <summary>
            	Specifies the type of fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2Type.None">
            <summary>
            	Specifies no fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2Type.Solid">
            <summary>
            	Specifies a solid fill in a single color.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2Type.Hatch">
            <summary>
            	Specifies a hatched fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2Type.Gradient">
            <summary>
            	Specifies a color gradient fill.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Filler2">
            <summary>
            	Class representing a solid, hatched, or gradient fill.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.#ctor">
            <summary>
            	Constructor for no fill.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.#ctor(System.Drawing.Color)">
            <summary>
            	Constructor for solid fill.
            </summary>
            <param name="solidColor">Fill color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for hatched fill.
            </summary>
            <param name="hatchStyle">A <c>System.Drawing.Drawing2D.HatchStyle</c> enumeration value that specifies the style of hatching.</param>
            <param name="hatchColor">Hatch lines color.</param>
            <param name="backColor">Background color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for a two color gradient fill.
            </summary>
            <param name="startColor">Starting color.</param>
            <param name="endColor">Ending color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.#ctor(System.Drawing.Color[],System.Single[])">
            <summary>
            	Constructor for a multi color gradient fill.
            </summary>
            <param name="colors">Array of colors to use at corresponding positions along the gradient.</param>
            <param name="positions">Array of positions along the gradient.</param>
            <remarks>
            	Refer to the documentation of <c>System.Drawing.Drawing2D.ColorBlend</c> for more information about <c>colors</c> and <c>positions</c>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="colors" /> or <paramref name="positions" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.#ctor(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            	Constructor for a multi color gradient fill.
            </summary>
            <param name="gradientColors">A <c>System.Drawing.Drawing2D.ColorBlend</c> object containing arrays of colors and positions defining a multi color gradient.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="gradientColors" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.Clone">
            <summary>
                Creates an exact copy of this <c>Filler2</c>.
            </summary>
            <returns>A <c>Filler2</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.Empty">
            <summary>
            	No fill constructor.	
            </summary>
            <returns><c>Filler2</c> no-fill object.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2.FillType">
            <summary>
            	Type of fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2.HatchStyle">
            <summary>
            	Hatch style in a hatched fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2.GradientColors">
            <summary>
            	Color blend for a linear or path gradient fill.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Filler2.SolidColor">
            <summary>
            	Gets foreground color in a solid fill.
            </summary>
            <value>
            	Foreground color in a solid fill.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Filler2.HatchColor">
            <summary>
            	Gets foreground color in a hatched fill.
            </summary>
            <value>
            	Foreground color in a hatched fill.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Filler2.BackColor">
            <summary>
            	Gets background color in a hatched fill.
            </summary>
            <value>
            	Background color in a hatched fill.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.GetBrush(System.Drawing.Point,System.Drawing.Point)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="p1">Starting point of gradient.</param>
            <param name="p2">Ending point of gradient.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>p1</c> and <c>p2</c> parameters only affect the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.GetBrush(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="p1">Starting point of gradient.</param>
            <param name="p2">Ending point of gradient.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>p1</c> and <c>p2</c> parameters only affect the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.GetBrush(System.Drawing.Rectangle)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.GetBrush(System.Drawing.Rectangle,System.Single)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <param name="angle">The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> and <c>angle</c> parameters only affect the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.GetBrush(System.Drawing.RectangleF)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>Filler2Type</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2.GetBrush(System.Drawing.RectangleF,System.Single)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <param name="angle">The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> and <c>angle</c> parameters only affect the brush if <c>FillType</c> is <c>Gradient</c>.
            	<para>
                The caller is responsible for disposing of the returned brush.
            	</para>
            </remarks>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Filler2EditorDialog">
            <summary>
            	Implements a dialog which allows design and editing of a <c>Filler2</c> object.
            	May be used in designer.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2EditorDialog.#ctor">
            <summary>
            	Initializes a new instance of <c>Filler2EditorDialog</c> using an empty <c>Filler2</c>
            	at the default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2EditorDialog.#ctor(Zeroit.Framework.FormEditors.Filler2)">
            <summary>
            	Initializes a new instance of <c>Filler2EditorDialog</c> using an existing <c>Filler2</c>
            	at the default window position.
            </summary>
            <param name="filler">Existing <c>Filler2</c> object.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="filler" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2EditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
            	Initializes a new instance of <c>Filler2EditorDialog</c> using an empty <c>Filler2</c>
            	and positioned beneath the specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2EditorDialog.#ctor(Zeroit.Framework.FormEditors.Filler2,System.Windows.Forms.Control)">
            <summary>
            	Initializes a new instance of <c>Filler2EditorDialog</c> using an existing <c>Filler2</c>
            	and positioned beneath the specified control.
            </summary>
            <param name="filler">Existing <c>Filler2</c> object.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="filler" /> is null.
            </exception>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Filler2EditorDialog.Filler">
            <summary>
            	Gets current filler.
            </summary>
            <value>
            	Current filler.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2EditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2EditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2EditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Filler2Editor">
            <summary>
                The <c>UITypeEditor</c> derived class which indicates how a <c>Filler2</c>
                object can be edited directly from Visual Studio Designer.
            </summary>
            <remarks>
                Note that this class is <b>NOT</b> meant to be invoked directly
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2Editor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>UITypeEditorEditStyle.Modal</c></returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2Editor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
                Creates and displays a <c>Filler2EditorDialog</c> dialog if <c>value</c> is a <c>Filler2</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider through which editing services may be obtained.</param>
            <param name="value">An instance of <c>Filler2</c> being edited.</param>
            <returns>The new value of the <c>Filler2</c> being edited.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2Editor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Indicates that painting is supported.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2Editor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
                Paint a representation of the simple filler (usually in designer).
            </summary>
            <param name="e">A <c>PaintValueEventArgs</c> that indicates what to paint and where to paint it.</param>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.FillerType">
            <summary>
            	Specifies the type of fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.FillerType.None">
            <summary>
            	Specifies no fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.FillerType.Solid">
            <summary>
            	Specifies a solid fill in a single color.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.FillerType.Hatch">
            <summary>
            	Specifies a hatched fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.FillerType.LinearGradient">
            <summary>
            	Specifies a color gradient fill in a fixed direction.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.FillerType.PathGradient">
            <summary>
            	Specifies a color gradient fill which radiates out from a center point.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.PathGradientType">
            <summary>
                Specifies the type of path gradient fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.PathGradientType.Rect">
            <summary>
            	Specifies a color gradient fill radiation out from a center point in a rectangular shape.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.PathGradientType.Radial">
            <summary>
            	Specifies a color gradient fill radiation out from a center point in a elliptical shape.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Filler">
            <summary>
            	Class representing a solid, hatched, or gradient fill.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor">
            <summary>
            	Constructor for no fill.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor(System.Drawing.Color)">
            <summary>
            	Constructor for solid fill.
            </summary>
            <param name="solidColor">Fill color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for hatched fill.
            </summary>
            <param name="hatchStyle">A <c>System.Drawing.Drawing2D.HatchStyle</c> enumeration value that specifies the style of hatching.</param>
            <param name="hatchColor">Hatch lines color.</param>
            <param name="backColor">Background color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor(System.Single,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for a two color linear gradient fill.
            </summary>
            <param name="linearGradientAngle">Angle of gradient.</param>
            <param name="startColor">Starting color.</param>
            <param name="endColor">Ending color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor(System.Single,System.Drawing.Color[],System.Single[])">
            <summary>
            	Constructor for a multi color linear gradient fill.
            </summary>
            <param name="linearGradientAngle">Angle of gradient.</param>
            <param name="colors">Array of colors to use at corresponding positions along the gradient.</param>
            <param name="positions">Array of positions along the gradient.</param>
            <remarks>
            	Refer to the documentation of <c>System.Drawing.Drawing2D.ColorBlend</c> for more information about <c>colors</c> and <c>positions</c>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="colors" /> or <paramref name="positions" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor(System.Single,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            	Constructor for a multi color linear gradient fill.
            </summary>
            <param name="linearGradientAngle">Angle of gradient.</param>
            <param name="gradientColors">A <c>System.Drawing.Drawing2D.ColorBlend</c> object containing arrays of colors and positions defining a multi color gradient.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="gradientColors" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor(Zeroit.Framework.FormEditors.PathGradientType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Constructor for a two color path gradient fill.
            </summary>
            <param name="pathGradientType">Type of path gradient.</param>
            <param name="startColor">Starting color.</param>
            <param name="endColor">Ending color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor(Zeroit.Framework.FormEditors.PathGradientType,System.Drawing.Color[],System.Single[])">
            <summary>
            	Constructor for a multi color path gradient fill.
            </summary>
            <param name="pathGradientType">Type of path gradient.</param>
            <param name="colors">Array of colors to use at corresponding positions along the gradient.</param>
            <param name="positions">Array of positions along the gradient.</param>
            <remarks>
            	Refer to the documentation of <c>System.Drawing.Drawing2D.ColorBlend</c> for more information about <c>colors</c> and <c>positions</c>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="colors" /> or <paramref name="positions" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.#ctor(Zeroit.Framework.FormEditors.PathGradientType,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            	Constructor for a multi color path gradient fill.
            </summary>
            <param name="pathGradientType">Type of path gradient.</param>
            <param name="gradientColors">A <c>System.Drawing.Drawing2D.ColorBlend</c> object containing arrays of colors and positions defining a multi color gradient.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="gradientColors" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.Clone">
            <summary>
                Creates an exact copy of this <c>Filler</c>.
            </summary>
            <returns>A <c>Filler</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.Empty">
            <summary>
            	No fill constructor.	
            </summary>
            <returns><c>Filler</c> no-fill object.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler.FillType">
            <summary>
            	Type of fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler.HatchStyle">
            <summary>
            	Hatch style in a hatched fill.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler.LinearGradientAngle">
            <summary>
            	Direction of gradient fill if <c>FillType</c> is <c>LinearGradient</c>.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler.PathGradientType">
            <summary>
            	Type of path gradient fill if <c>FillType</c> is <c>PathGradient</c>.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler.GradientColors">
            <summary>
            	Color blend for a linear or path gradient fill.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Filler.SolidColor">
            <summary>
            	Gets foreground color in a solid fill.
            </summary>
            <value>
            	Foreground color in a solid fill.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Filler.HatchColor">
            <summary>
            	Gets foreground color in a hatched fill.
            </summary>
            <value>
            	Foreground color in a hatched fill.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Filler.BackColor">
            <summary>
            	Gets background color in a hatched fill.
            </summary>
            <value>
            	Background color in a hatched fill.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.GetBrush(System.Drawing.Rectangle)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>FillerType</c> is <c>LinearGradient</c> or <c>PathGradient</c>.
                <para>
                The caller is responsible for disposing of the returned brush.
                </para>
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler.GetBrush(System.Drawing.RectangleF)">
            <summary>
                Get <c>Brush</c> for this fill.
            </summary>
            <param name="rect">Rectangle area to which fill is to be applied.</param>
            <returns>Brush.</returns>
            <remarks>
            	The <c>rect</c> parameter only affects the brush if <c>FillerType</c> is <c>LinearGradient</c> or <c>PathGradient</c>.
                <para>
                The caller is responsible for disposing of the returned brush.
                </para>
            </remarks>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Filler2Panel">
            <summary>
            	Represents a control for displaying a <c>Filler2</c> value.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2Panel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Filler2Panel.Filler">
            <summary>
                Gets or sets the simple filler.
            </summary>
            <value>
                The simple filler.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Filler2Panel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2Panel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Filler2Panel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.FillerEditorDialog">
            <summary>
            	Implements a dialog which allows design and editing of a <c>Filler</c> object.
            	May be used in designer.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditorDialog.#ctor">
            <summary>
            	Initializes a new instance of <c>FillerEditorDialog</c> using an empty <c>Filler</c>
            	at the default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditorDialog.#ctor(Zeroit.Framework.FormEditors.Filler)">
            <summary>
            	Initializes a new instance of <c>FillerEditorDialog</c> using an existing <c>Filler</c>
            	at the default window position.
            </summary>
            <param name="filler">Existing <c>Filler</c> object.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="filler" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
            	Initializes a new instance of <c>FillerEditorDialog</c> using an empty <c>Filler</c>
            	and positioned beneath the specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditorDialog.#ctor(Zeroit.Framework.FormEditors.Filler,System.Windows.Forms.Control)">
            <summary>
            	Initializes a new instance of <c>FillerEditorDialog</c> using an existing <c>Filler</c>
            	and positioned beneath the specified control.
            </summary>
            <param name="filler">Existing <c>Filler</c> object.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="filler" /> is null.
            </exception>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.FillerEditorDialog.Filler">
            <summary>
            	Gets current filler.
            </summary>
            <value>
            	Current filler.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.FillerEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.FillerEditor">
            <summary>
                The <c>UITypeEditor</c> derived class which indicates how a <c>Filler</c>
                object can be edited directly from Visual Studio Designer.
            </summary>
            <remarks>
                Note that this class is <b>NOT</b> meant to be invoked directly
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>UITypeEditorEditStyle.Modal</c></returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
                Creates and displays a <c>FillerEditorDialog</c> dialog if <c>value</c> is a <c>Filler</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider through which editing services may be obtained.</param>
            <param name="value">An instance of <c>Filler</c> being edited.</param>
            <returns>The new value of the <c>Filler</c> being edited.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Indicates that painting is supported.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
                Paint a representation of the simple filler (usually in designer).
            </summary>
            <param name="e">A <c>PaintValueEventArgs</c> that indicates what to paint and where to paint it.</param>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.FillerPanel">
            <summary>
            	Represents a control for displaying a <c>Filler</c> value.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerPanel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.FillerPanel.Filler">
            <summary>
                Gets or sets the simple filler.
            </summary>
            <value>
                The simple filler.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.FillerPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.FillerPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.ColorSpace">
            <summary>
            	Specifies the type of HS color space.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.ColorSpace.HSV">
            <summary>
            	Specifies the Hue/Saturation/Value color space.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.ColorSpace.HSL">
            <summary>
            	Specifies the Hue/Saturation/Luma color space.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.HSColor">
            <summary>
            	Represent an HSL or HSV color.
            	The actual color space (HSL or HSV) does not need to be specified until the
            	the value is converted to RGB.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HSColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            	Construct an HS color.
            </summary>
            <param name="hue">Hue; should be in there range [0,360) - will be silently adjusted if not.</param>
            <param name="sat">Saturation; must be the range [0,1].</param>
            <param name="val">Value or Luma; must be the range [0,1].</param>
            <exception cref="T:System.ArgumentException">
            	Thrown if <paramref name="sat" /> is less than zero or greater than one, or if
            	<paramref name="val" /> is less than zero or greater than one.
            </exception>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.HSColor.Hue">
            <summary>
            	Hue.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.HSColor.Sat">
            <summary>
            	Saturation.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.HSColor.Val">
            <summary>
            	Value or luma.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HSColor.ToRGB(Zeroit.Framework.FormEditors.ColorSpace)">
            <summary>
            	Convert color to RGB.
            </summary>
            <param name="cs">Color space from which to convert.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HSColor.HSL2RGB(System.Double,System.Double,System.Double)">
            <summary>
            	Convert HSL color to RGB.
            </summary>
            <param name="hue">Hue.</param>
            <param name="sat">Saturation.</param>
            <param name="val">Luma.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HSColor.HSV2RGB(System.Double,System.Double,System.Double)">
            <summary>
            	Convert HSV color to RGB.
            </summary>
            <param name="hue">Hue.</param>
            <param name="sat">Saturation.</param>
            <param name="val">Value.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HSColor.RGB2HSL(System.Drawing.Color)">
            <summary>
            	Convert RGB color to HSL color.
            </summary>
            <param name="c">Color (RGB) value.</param>
            <returns>HSColor value in the HSL color space.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HSColor.RGB2HSV(System.Drawing.Color)">
            <summary>
            	Convert RGB color to HSV color.
            </summary>
            <param name="c">Color (RGB) value.</param>
            <returns>HSColor value in the HSV color space.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HSColor.GenerateCircle(System.Drawing.Size,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,Zeroit.Framework.FormEditors.ColorSpace,System.Double)">
            <summary>
            	Generate a HSV or HSL color circle.
            </summary>
            <param name="size">Size of returned bitmap.</param>
            <param name="innerRadius">Radius of inner edge of color circle.</param>
            <param name="outerRadius">Radius of outer edge of color circle.</param>
            <param name="binning">Binning factor.</param>
            <param name="innerColor">Solid color of area within the inner radius.</param>
            <param name="outerColor">Solid color of area outside the outer radius.</param>
            <param name="colorSpace">Color space (HSV or HSL).</param>
            <param name="val">Value if color space is HSV, or luma if color space is HSL.</param>
            <returns>Bitmap of the color circle.</returns>
            <exception cref="T:System.ArgumentException">
            	Thrown if either member (<c>Width</c> or <c>Height</c>) of <paramref name="size" /> is less than one, or if
            	<paramref name="innerRadius" /> is less than zero, or if
            	<paramref name="innerRadius" /> is greater than <paramref name="outerRadius" />, of if
            	<paramref name="binning" /> is less than 1 or greater than <paramref name="outerRadius" />, or if
            	<paramref name="val" /> is less than zero or greater the one.
            </exception>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.ColorGradientEditor">
            <summary>
            	Implements a control for designing a color gradient.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditor.#ctor">
            <summary>
            	Default contructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditor.Blend">
            <summary>
            	Gets or sets color blend.
            </summary>
            <value>
            	Color blend.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditor.GradientBorderColor">
            <summary>
            	Gets or sets color of border around gradient display.
            </summary>
            <value>
            	Color of border around gradient display.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditor.GradientBorderSize">
            <summary>
            	Gets or sets pixel size of border around gradient display.
            </summary>
            <value>
            	Pixel size of border around gradient display.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditor.GradientBackColor">
            <summary>
            	Gets or sets background color in gradient display.
            </summary>
            <value>
            	Background color in gradient display.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditor.GradientHatchColor">
            <summary>
            	Gets or sets hatch pattern in background of gradient display.
            </summary>
            <value>
            	Hatch pattern in background of gradient display.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditor.MarkerBorderColor">
            <summary>
            	Gets or sets marker border color.
            </summary>
            <value>
            	Marker border color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditor.MarkerFillColor">
            <summary>
            	Gets or sets marker fill color.
            </summary>
            <value>
            	Marker fill color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditor.SelMarkerFillColor">
            <summary>
            	Gets or sets selected marker fill color.
            </summary>
            <value>
            	Selected marker fill color.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.ColorGradientEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.ColorGradientEditorDialog">
            <summary>
                Represents a dialog that enables the user to design and edit a color gradient.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.#ctor">
            <summary>
                Constructor with no starting color blend and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.#ctor(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
                Constructor with starting color blend and default window position.
            </summary>
            <param name="blend">Starting color blend.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor with no starting color gradient and starting position beneath specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.#ctor(System.Drawing.Drawing2D.ColorBlend,System.Windows.Forms.Control)">
            <summary>
                Constructor with starting color blend and starting position beneath specified control.
            </summary>
            <param name="blend">Starting color blend.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.#ctor(System.Drawing.Point)">
            <summary>
                Consructor with no starting color blend and starting position.
            </summary>
            <param name="p">Starting position.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.#ctor(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Point)">
            <summary>
                Constructor with starting color blend and starting position.
            </summary>
            <param name="blend">Starting color blend.</param>
            <param name="p">Starting position.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.Blend">
            <summary>
                Gets or sets current color blend.
            </summary>
            <value>
                Current color blend.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorGradientEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.CustomColorPickerDialog">
            <summary>
                Represents a dialog that enables the user to select a customized color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.#ctor">
            <summary>
                Constructor with no starting color and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.#ctor(System.Drawing.Color)">
            <summary>
                Constructor with starting color and default window position.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor with no starting color and starting position beneath specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.#ctor(System.Drawing.Color,System.Windows.Forms.Control)">
            <summary>
                Constructor with starting color and starting position beneath specified control.
            </summary>
            <param name="color">Starting color.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.#ctor(System.Drawing.Point)">
            <summary>
                Consructor with no starting color and starting position.
            </summary>
            <param name="p">Starting position.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.#ctor(System.Drawing.Color,System.Drawing.Point)">
            <summary>
                Constructor with starting color and starting position.
            </summary>
            <param name="color">Starting color.</param>
            <param name="p">Starting position.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CustomColorPickerDialog.Color">
            <summary>
                Gets or sets selected color.
            </summary>
            <value>
                Selected color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.CustomColorPickerDialog.ColorName">
            <summary>
                Gets name of selected color.
            </summary>
            <value>
                Name of selected color.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
                Override to capture Esc key.
            </summary>
            <param name="keyCode">Key.</param>
            <returns><c>True</c> if key handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.CustomColorPickerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPickerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Line">
            <summary>
                Class representing a line of any color, thickness, and dash style.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.#ctor(System.Drawing.Color)">
            <summary>
                Constructor for a solid line of width 1.
            </summary>
            <param name="color">Line color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.#ctor(System.Drawing.Color,System.Single)">
            <summary>
                Constructor for a aolid line of any color and width.
            </summary>
            <param name="color">Line color.</param>
            <param name="width">Width in pixels.  A value of zero or less indicates an empty line.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.#ctor(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>
                Constructor for a line of any color, width and dashstyle.
            </summary>
            <param name="color">Line color.</param>
            <param name="width">Width in pixels.  A value of zero or less indicates an empty line.</param>
            <param name="dashStyle">Dashstyle.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.#ctor(System.Drawing.Color,System.Single,System.Single[])">
            <summary>
                Constructor for a line with a custom dash pattern.
            </summary>
            <param name="color">Line color.</param>
            <param name="width">Width in pixels.  A value of zero or less indicates an empty line.</param>
            <param name="dashPattern">An array of real numbers that specifies the lengths of alternating dashes and spaces.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.#ctor(Zeroit.Framework.FormEditors.Line)">
            <summary>
                Constructor for a line from another line.
            </summary>
            <param name="other"><c>Line</c> to copy.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.Empty">
            <summary>
            	Constructs an empty line.
            </summary>
            <returns>A <c>Line</c> with color <c>Color.Empty</c> and zero width.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.Clone">
            <summary>
                Creates an exact copy of this <c>Line</c>.
            </summary>
            <returns>A <c>Line</c>.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Line.Color">
            <summary>
                Line color.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Line.Width">
            <summary>
                Line width (in pixels).
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Line.DashStyle">
            <summary>
                Dashstyle.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.Line.DashPattern">
            <summary>
                Dash pattern.  Is <c>null</c> unless <c>DashStyle</c> is <c>DashStyle.Custom</c>.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Line.IsEmpty">
            <summary>
            	<c>True</c> if empty, false otherwise.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Line.GetPen">
            <summary>
                Get pen for this line.
            </summary>
            <returns>Pen.</returns>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.LinearGradientModeComboBox">
            <summary>
                Represents a ComboBox control from which the user can select a linear gradient mode.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinearGradientModeComboBox.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinearGradientModeComboBox.Items">
            <summary>
            	Gets list of selectable items.
                Overridden member to prevent designer from re-adding list of linear gradient mode values.
            </summary>
            <value>
            	List of selectable items.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinearGradientModeComboBox.DropDownStyle">
            <summary>
            	Gets the current drop down style.
                Overridden to prevent changing drop down style.
            </summary>
            <value>
            	The current drop down style.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinearGradientModeComboBox.DrawMode">
            <summary>
                Gets the current draw mode.
            	Overridden to prevent changing draw mode.
            </summary>
            <value>
                Current draw mode.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinearGradientModeComboBox.SelectedIndex">
            <summary>
                Gets index specifying the currently selected item.
            	Overridden to prevent an index of -1.
            </summary>
            <value>
            	Index specifying the currently selected item.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinearGradientModeComboBox.SelectedMode">
            <summary>
                Gets or sets currently selected linear gradient mode.
            </summary>
            <value>
                Currently selected linear gradient mode.
            </value>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.LinearGradientPanel">
            <summary>
                Represents a control for displaying a linear color gradient.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinearGradientPanel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinearGradientPanel.Blend">
            <summary>
                Gets or sets color blend.
            </summary>
            <value>
                Color blend.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinearGradientPanel.Mode">
            <summary>
                Gets or sets linear gradient mode.
            </summary>
            <value>
                Linear gradient mode.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.LinearGradientPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinearGradientPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinearGradientPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.BaseColorPicker">
            <summary>
            	Base class for a color selection control.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.BaseColorPicker.ColorSelectedEventHandler">
            <summary>
            	Represents the method that will handle the <c>ColorSelected</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ColorSelectedEventArgs</c> that contains the event data.</param>
        </member>
        <member name="E:Zeroit.Framework.FormEditors.BaseColorPicker.ColorSelected">
            <summary>
            	Occurs when the user has selected a color in the derived class.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BaseColorPicker.SelectColor(System.Drawing.Color)">
            <summary>
            	Specify that a color has been selected.
            </summary>
            <param name="c">Selected color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BaseColorPicker.SelectColor(Zeroit.Framework.FormEditors.ColorSelectedEventArgs)">
            <summary>
            	Specify that a color has been selected.
            </summary>
            <param name="args">Color selected event args.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.BaseColorPicker.SetColor(System.Drawing.Color)">
            <summary>
            	Set current color.
            	Derived class should override this method.
            </summary>
            <param name="c">Color.</param>
            <returns><c>True</c> if color is known by the derived class and was set, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.ColorSelectedEventArgs">
            <summary>
            	Provides data for the <c>ColorSelected</c> event.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ColorSelectedEventArgs.#ctor(System.Drawing.Color,System.String)">
            <summary>
            	Initializes a new instance of the <c>ColorSelectedEventArgs</c> class.
            </summary>
            <param name="color">Selected color.</param>
            <param name="colorName">Name of selected color (for displaying).</param>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.ColorSelectedEventArgs.Color">
            <summary>
            	Selected color.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.ColorSelectedEventArgs.ColorName">
            <summary>
            	Name of selected color.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.CustomColorPicker">
            <summary>
                Implements a color picker for selecting a customized color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPicker.#ctor">
            <summary>
            	Constructor with no starting color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPicker.#ctor(System.Drawing.Color)">
            <summary>
            	Constructor with starting color.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPicker.SetColor(System.Drawing.Color)">
            <summary>
            	Set current selected color.
            </summary>
            <param name="color">Current color.</param>
            <returns><c>True</c>.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.CustomColorPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.CustomColorPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.DashStyleComboBox">
            <summary>
                Represents a ComboBox control from which the user can select a dash style.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.DashStyleComboBox.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.DashStyleComboBox.Items">
            <summary>
            	Gets list of selectable items.
                Overridden member to prevent designer from re-adding list of dash styles.
            </summary>
            <value>
            	List of selectable items.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.DashStyleComboBox.DropDownStyle">
            <summary>
            	Gets the current drop down style.
                Overridden to prevent changing drop down style.
            </summary>
            <value>
            	The current drop down style.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.DashStyleComboBox.DrawMode">
            <summary>
                Gets the current draw mode.
            	Overridden to prevent changing draw mode.
            </summary>
            <value>
                Current draw mode.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.DashStyleComboBox.SelectedIndex">
            <summary>
                Gets index specifying the currently selected item.
            	Overridden to prevent an index of -1.
            </summary>
            <value>
            	Index specifying the currently selected item.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.DashStyleComboBox.SelectedDashStyle">
            <summary>
                Gets or sets currently selected dash style.
            </summary>
            <value>
                Currently selected dash style.
            </value>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.HatchStylePanel">
            <summary>
                Represents a control for displaying a hatch pattern.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HatchStylePanel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.HatchStylePanel.HatchColor">
            <summary>
                Gets or sets hatch color.
            </summary>
            <value>
                Hatch color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.HatchStylePanel.BackColor">
            <summary>
                Gets or sets background color.
            </summary>
            <value>
                Background color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.HatchStylePanel.HatchStyle">
            <summary>
                Gets or sets hatch style.
            </summary>
            <value>
                Hatch style.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HatchStylePanel.Set(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Set hatch style, hatch color, and background color.
            </summary>
            <param name="hatchStyle">Hatch style.</param>
            <param name="hatchColor">Hatch color.</param>
            <param name="backColor">Background color.</param>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.HatchStylePanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HatchStylePanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HatchStylePanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.HatchStyleComboBox">
            <summary>
                Represents a ComboBox control from which the user can select a hatch style.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.HatchStyleComboBox.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.HatchStyleComboBox.Items">
            <summary>
            	Gets list of selectable items.
                Overridden member to prevent designer from re-adding list of hatch styles.
            </summary>
            <value>
            	List of selectable items.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.HatchStyleComboBox.DropDownStyle">
            <summary>
            	Gets the current drop down style.
                Overridden to prevent changing drop down style.
            </summary>
            <value>
            	The current drop down style.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.HatchStyleComboBox.DrawMode">
            <summary>
                Gets the current draw mode.
            	Overridden to prevent changing draw mode.
            </summary>
            <value>
                Current draw mode.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.HatchStyleComboBox.SelectedIndex">
            <summary>
                Gets index specifying the currently selected item.
            	Overridden to prevent an index of -1.
            </summary>
            <value>
            	Index specifying the currently selected item.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.HatchStyleComboBox.SelectedHatchStyle">
            <summary>
                Gets or sets currently selected hatch style.
            </summary>
            <value>
                Currently selected hatch style.
            </value>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.LinearGradientBrush2">
            <summary>
                Represents a replacement for the <c>System.Drawing.Drawing2D.LinearGradientBrush</c>.
            </summary>
            <remarks>
            	There is a bug in the <c>System.Drawing.Drawing2D.LinearGradientBrush</c> where somtimes,
            	the gradient wraps around and fills the first pixel column/row with the last color.
            	It was explained as one-of-many off-by-one bugs in GDI+:
            	http://stackoverflow.com/questions/5326473/weird-behavior-of-lineargradientbrush
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinearGradientBrush2.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary>
                Constructor for a two color linear gradient.
            </summary>
            <param name="rect">Bounding rectangle of area to be filled.</param>
            <param name="c1">Starting color.</param>
            <param name="c2">Ending color.</param>
            <param name="mode">A <c>System.Drawing.Drawing2D.LinearGradientMode</c> enumeration value that specifies the orientation of the gradient.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinearGradientBrush2.#ctor(System.Drawing.Rectangle,System.Drawing.Drawing2D.ColorBlend,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary>
                Constructor for a multi color linear gradient.
            </summary>
            <param name="rect">Bounding rectangle of area to be filled.</param>
            <param name="blend">A <c>System.Drawing.Drawing2D.ColorBlend</c> object containing arrays of colors and positions defining a multi color gradient.</param>
            <param name="mode">A <c>System.Drawing.Drawing2D.LinearGradientMode</c> enumeration value that specifies the orientation of the gradient.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="blend" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinearGradientBrush2.Dispose">
            <summary>
                Dispose of brush.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinearGradientBrush2.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Brush)">
            <summary>
                Fill a rectangular area with the linear gradient.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="r">Rectangle area to fill.</param>
            <param name="backBrush">Brush to fill the background before filling with the linear gradient.</param>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="g" /> is null.
            </exception>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.LineEditorDialog">
            <summary>
                Implements a dialog which allows design and editing of a <c>Line</c> object.
            	May be used in designer.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditorDialog.#ctor">
            <summary>
                Initializes a new instance of <c>LineEditorDialog</c> with a default <c>Line</c>
                and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditorDialog.#ctor(Zeroit.Framework.FormEditors.Line)">
            <summary>
                Initializes a new instance of <c>LineEditorDialog</c> using an existing <c>Line</c>
                and default window position.
            </summary>
            <param name="line">Existing <c>Line</c>.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Initializes a new instance of <c>LineEditorDialog</c> with a default <c>Line</c>
                and starting beneath a specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditorDialog.#ctor(Zeroit.Framework.FormEditors.Line,System.Windows.Forms.Control)">
            <summary>
                Initializes a new instance of <c>LineEditorDialog</c> using an existing <c>Line</c>
                and starting beneath a specified control.
            </summary>
            <param name="line">Existing <c>Line</c>.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LineEditorDialog.Line">
            <summary>
                Gets the line selected by the user.
            </summary>
            <value>
            	The line selected by the user.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.LineEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.LineEditor">
            <summary>
                The <c>UITypeEditor</c> derived class which indicates how a <c>Line</c>
                object can be edited directly from Visual Studio Designer.
            </summary>
            <remarks>
                Note that this class is <b>NOT</b> meant to be invoked directly
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>UITypeEditorEditStyle.Modal</c></returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
                Creates and displays a <c>LineEditorDialog</c> dialog if <c>value</c> is a <c>Line</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider through which editing services may be obtained.</param>
            <param name="value">An instance of <c>Line</c> being edited.</param>
            <returns>The new value of the <c>Line</c> being edited.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Indicates that painting is supported.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LineEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
                Paint a representation of the line (usually in designer).
            </summary>
            <param name="e">A <c>PaintValueEventArgs</c> that indicates what to paint and where to paint it.</param>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.LinePanel">
            <summary>
            	Represents a control for displaying a line.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinePanel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinePanel.Line">
            <summary>
                Get line displayed in panel.
            </summary>
            <value>
                Line displayed in panel.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.LinePanel.Orientation">
            <summary>
                Get display orientation of line.
            </summary>
            <value>
                Display orientation of line.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.LinePanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinePanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.LinePanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.ZeroitExtendedPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.MaterialDesignColors.Info">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Amber.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Amber.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Amber.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Blue.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Blue.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Blue.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.BlueGrey.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.BlueGrey.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.BlueGrey.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Brown.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Brown.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Brown.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Cyan.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Cyan.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Cyan.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Green.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Green.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Green.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.GreenLight.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.GreenLight.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.GreenLight.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Grey.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Grey.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Grey.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Indigo.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Indigo.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Indigo.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.LightBlue.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.LightBlue.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.LightBlue.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Lime.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Lime.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Lime.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Orange.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Orange.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Orange.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.OrangeDeep.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.OrangeDeep.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.OrangeDeep.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Pink.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Pink.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Pink.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Purple.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Purple.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Purple.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.PurpleDeep.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.PurpleDeep.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.PurpleDeep.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Red.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Red.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Red.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Teal.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Teal.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Teal.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Yellow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Yellow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.UserControls.Yellow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.AmberControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.AmberControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.AmberControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BlueControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BlueControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BlueControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BlueGrayControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BlueGrayControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BlueGrayControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BrownControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BrownControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.BrownControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.CyanControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.CyanControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.CyanControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.GreenControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.GreenControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.GreenControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LightGreenControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LightGreenControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LightGreenControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.GreyControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.GreyControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.GreyControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.IndigoControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.IndigoControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.IndigoControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LightBlueControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LightBlueControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LightBlueControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LimeControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LimeControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.LimeControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.OrangeControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.OrangeControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.OrangeControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.DeepOrangeControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.DeepOrangeControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.DeepOrangeControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.PinkControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.PinkControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.PinkControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.PurpleControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.PurpleControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.PurpleControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.DeepPurpleControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.DeepPurpleControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.DeepPurpleControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.RedControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.RedControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.RedControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.TealControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.TealControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.TealControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.YellowControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.YellowControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.MaterialDesignColors.MaterialDesign.YellowControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.NoFlickerPanel">
            <summary>
                Represents a panel control with double buffering enabled (does not flicker on update).
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.NoFlickerPanel.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.NoFlickerPanel.SetInputKeys(System.Windows.Forms.Keys[])">
            <summary>
                Set list of input keys.
            </summary>
            <param name="inputKeys">Array of key values.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.NoFlickerPanel.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
                Override to capture keys specified in <c>SetInputKeys</c>
            </summary>
            <param name="keyCode">Keycode.</param>
            <returns><c>True</c> if handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.NoFlickerPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.NoFlickerPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.NoFlickerPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Polygon">
            <summary>
            	Class representing a polygon.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.#ctor">
            <summary>
                Constructor for an empty polygon.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.#ctor(System.Drawing.PointF[])">
            <summary>
                Constructor for a polygon from an array of points.
            </summary>
            <param name="points">Array of points.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.#ctor(System.Single[],System.Single[])">
            <summary>
                Constructor for a polygon from separate arrays of x and y coordinates.
            </summary>
            <param name="x">Array of x coordinates.</param>
            <param name="y">Array of y coordinates.</param>
            <exception cref="T:System.ArgumentException">One of <c>x</c> or <c>y</c> is <c>null</c>,
                           or both <c>x</c> and <c>y</c> are not <c>null</c> but have different lengths.</exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.#ctor(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
                Constructor for a polygon from a list of points.
            </summary>
            <param name="list">List of points.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.#ctor(Zeroit.Framework.FormEditors.Polygon)">
            <summary>
                Constructor for a polygon from another instance of <c>Polygon</c>.
            </summary>
            <param name="other">Other instance of <c>Polygon</c>.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.Clone">
            <summary>
                Creates an exact copy of this <c>Polygon</c>.
            </summary>
            <returns>A new <c>Polygon</c> object.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.Add(System.Drawing.PointF)">
            <summary>
                Add point to polygon.
            </summary>
            <param name="point">Point to add.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.RemoveAt(System.Int32)">
            <summary>
                Remove point from polygon.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is less than 0 or
                            <c>index</c> is equal or greater than <c>Count</c>.</exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Polygon.Clear">
            <summary>
                Delete existing points.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Polygon.Count">
            <summary>
                Gets the number of points in the polygon.
            </summary>
            <value>
                The number of points in the polygon.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Polygon.Item(System.Int32)">
            <summary>
                Gets the point at the specified index.
            </summary>
            <value>
                The point at the specified index.
            </value>
            <param name="index">The zero-based index of the point to get.</param>
            <returns>The point at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is less than 0 or
                            <c>index</c> is equal or greater than <c>Count</c>.</exception>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Polygon.Points">
            <summary>
                Gets an array containing copies of the points.
            </summary>
            <value>
                An array containing copies of the points.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Polygon.X">
            <summary>
                Gets and array containing copies of the X coordinates.
            </summary>
            <value>
                An array containing copies of the X coordinates.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Polygon.Y">
            <summary>
                Gets and array containing copies of the Y coordinates.
            </summary>
            <value>
                An array containing copies of the Y coordinates.
            </value>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.PolygonEditorDialog">
            <summary>
                Implements a dialog which allows design and editing of a <c>Polygon</c> object.
            	May be used in designer.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.PolygonEditorDialog.#ctor">
            <summary>
                Initializes a new instance of <c>PolygonEditorDialog</c> with an empty polygon
                and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.PolygonEditorDialog.#ctor(Zeroit.Framework.FormEditors.Polygon)">
            <summary>
                Initializes a new instance of <c>PolygonEditorDialog</c> using an existing polygon
                and default window position.
            </summary>
            <param name="poly">Existing <c>Polygon</c>.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.PolygonEditorDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Initializes a new instance of <c>PolygonEditorDialog</c> with an empty polygon
                and starting beneath a specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.PolygonEditorDialog.#ctor(Zeroit.Framework.FormEditors.Polygon,System.Windows.Forms.Control)">
            <summary>
                Initializes a new instance of <c>PolygonEditorDialog</c> using an existing polygon
                and starting beneath a specified control.
            </summary>
            <param name="poly">Existing <c>Polygon</c>.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.PolygonEditorDialog.Polygon">
            <summary>
                Gets the polygon designed by the user.
            </summary>
            <value>
                The polygon designed by the user.
            </value>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.PolygonEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.PolygonEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.PolygonEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.PolygonEditor">
            <summary>
                The <c>UITypeEditor</c> derived class which indicates how a <c>Polygon</c>
                object can be edited directly from Visual Studio Designer.
            </summary>
            <remarks>
                Note that this class is <b>NOT</b> meant to be invoked directly.
            </remarks>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.PolygonEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
                Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns><c>UITypeEditorEditStyle.Modal</c></returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.PolygonEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
                Creates and displays a <c>PolygonEditorDialog</c> dialog if <c>value</c> is a <c>Polygon</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider through which editing services may be obtained.</param>
            <param name="value">An instance of <c>Polygon</c> being edited.</param>
            <returns>The new value of the <c>Polygon</c> being edited.</returns>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Back">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Color">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Double_Left">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Double_Right">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.downLeft">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.DownLeft_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.downRight">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.DownRight_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.First">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Forward">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.HSL200">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Last">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Next">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.Prev">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.upLeft">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.UpLeft_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.upRight">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.Properties.Resources.UpRight_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.SystemColorPicker">
            <summary>
            	Implements a categorized color picker using system colors.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPicker.GenerateColorGroups">
            <summary>
                Generate color groups.
            </summary>
            <returns>Array of color groups.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPicker.GetMaxColumnCount">
            <summary>
                Returns maximum number of columns (1).
            </summary>
            <returns>Maximum number of columns.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPicker.SplitColorGroups(Zeroit.Framework.FormEditors.ColorGroup[][])">
            <summary>
                Organizes the color groups depending on the number of columns being displayed.
            </summary>
            <param name="groups">Array of array of color groups.</param>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.SystemColorPickerDialog">
            <summary>
                Represents a dialog that enables the user to select a system color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.#ctor">
            <summary>
                Constructor with no starting color and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.#ctor(System.Drawing.Color)">
            <summary>
                Constructor with starting color and default window position.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor with no starting color and starting position beneath specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.#ctor(System.Drawing.Color,System.Windows.Forms.Control)">
            <summary>
                Constructor with starting color and starting position beneath specified control.
            </summary>
            <param name="color">Starting color.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.#ctor(System.Drawing.Point)">
            <summary>
                Consructor with no starting color and starting position.
            </summary>
            <param name="p">Starting position.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.#ctor(System.Drawing.Color,System.Drawing.Point)">
            <summary>
                Constructor with starting color and starting position.
            </summary>
            <param name="color">Starting color.</param>
            <param name="p">Starting position.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.SystemColorPickerDialog.Color">
            <summary>
                Gets or sets selected color.
            </summary>
            <value>
                Selected color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.SystemColorPickerDialog.ColorName">
            <summary>
                Gets name of selected color.
            </summary>
            <value>
                Name of selected color.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
                Override to capture Esc key.
            </summary>
            <param name="keyCode">Key.</param>
            <returns><c>True</c> if key handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.SystemColorPickerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.SystemColorPickerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.Utils">
            <summary>
                Utility class for useful methods.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.SetStartPositionBelowControl(System.Windows.Forms.Form,System.Windows.Forms.Control)">
            <summary>
                Position form so that it is centered beneath a control, adjusted to that it 
            	is entirely on the screen if possible.
            </summary>
            <param name="f">Form to position.</param>
            <param name="c">Control under which to position the form.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.SetStartPosition(System.Windows.Forms.Form,System.Drawing.Point)">
            <summary>
                Position form such that the center of the top edge is at a particular point,
            	adjusted so that it is entirely on the screen if possible.
            </summary>
            <param name="f">Form to position.</param>
            <param name="p">Point at which to center the top edge of the form.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.GetDefaultColorBlend">
            <summary>
                Generate a default color blend (red, green, blue)
            </summary>
            <returns>Default color blend.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.NewColorBlend(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            	Generate a <c>ColorBlend</c> object from two colors.
            </summary>
            <param name="color1">Starting color.</param>
            <param name="color2">Ending color.</param>
            <returns>New <c>ColorBlend</c> object.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.CloneColorBlend(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            	Copy a <c>ColorBlend</c> object.
            </summary>
            <param name="cb">Source object to copy.</param>
            <returns>New <c>ColorBlend</c> object.  <c>Null</c> if source was <c>null</c>.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.NewColorBlend(System.Drawing.Color[],System.Single[])">
            <summary>
            	Generate a <c>ColorBlend</c> object from an array of colors and array of positions.
            </summary>
            <param name="colors">Array of colors.</param>
            <param name="positions">Array of positions.</param>
            <returns>New <c>ColorBlend</c> object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="colors" /> or <paramref name="positions" /> is null.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.CalcSubColorBlend(System.Drawing.Drawing2D.ColorBlend,System.Single,System.Single)">
            <summary>
            	Generate a <c>ColorBlend</c> object from subsection of an existing color blend.
            </summary>
            <param name="cb"><c>ColorBlend</c> object.</param>
            <param name="minPos">Start position in <c>cb</c> of the subsection.</param>
            <param name="maxPos">End position in <c>cb</c> of the subsection.</param>
            <returns>New color blend.</returns>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="cb" /> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	Thrown if <paramref name="minPos" /> is less than zero,
            	<paramref name="maxPos" /> is greater than one, or
            	<paramref name="maxPos" /> is less than <paramref name="minPos" />.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.CalcGradientColor(System.Drawing.Drawing2D.ColorBlend,System.Single)">
            <summary>
                Calculate the color for a particular position in a <c>ColorBlend</c> object.
            </summary>
            <param name="cb"><c>ColorBlend</c> object.</param>
            <param name="pos">Position in <c>cb</c>.</param>
            <returns>Color at position.</returns>
            <exception cref="T:System.ArgumentNullException">
            	Thrown if <paramref name="cb" /> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	Thrown if <paramref name="pos" /> is less than zero, or reater than one.
            </exception>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.CalcColor(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            	Generate a new color from a weighted combination of two other colors.
            </summary>
            <param name="color1">First color.</param>
            <param name="color2">Second color.</param>
            <param name="ratio">Ratio between first and second color.</param>
            <returns>New <c>Color</c> object.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.Utils.Flip(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            	Generate a new <c>ColorBlend</c> which is a flipped version of an existing blend.
            </summary>
            <param name="oldcb">Blend to flip</param>
            <returns>New <c>ColorBlend</c> object.</returns>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.WebColorPicker">
            <summary>
                Implements a categorized color picker using web colors.
                <para>
                The color groups were blatantly copied from www.wikipedia.org/en/web_colors.
                </para>
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPicker.GenerateColorGroups">
            <summary>
                Generate color groups.
            </summary>
            <returns>Array of color groups.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPicker.GetMaxColumnCount">
            <summary>
                Returns maximum number of columns (3).
            </summary>
            <returns>Maximum number of columns.</returns>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPicker.SplitColorGroups(Zeroit.Framework.FormEditors.ColorGroup[][])">
            <summary>
                Organizes the color groups depending on the number of columns being displayed.
            </summary>
            <param name="groups">Array of array of color groups.</param>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.ComboColorPicker">
            <summary>
            	Implements a color picker which combines the web, system, and custom color pickers.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPicker.#ctor">
            <summary>
            	Constructor with no starting color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPicker.#ctor(System.Drawing.Color)">
            <summary>
            	Constructor with starting color.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPicker.SetColor(System.Drawing.Color)">
            <summary>
            	Set current selected color.
            </summary>
            <param name="color">Current color.</param>
            <returns><c>True</c>.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.ComboColorPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.ComboColorPickerDialog">
            <summary>
                Represents a dialog that enables the user to select a web, system, or customized color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.#ctor">
            <summary>
                Constructor with no starting color and default window position.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.#ctor(System.Drawing.Color)">
            <summary>
                Constructor with starting color and default window position.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor with no starting color and starting position beneath specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.#ctor(System.Drawing.Color,System.Windows.Forms.Control)">
            <summary>
                Constructor with starting color and starting position beneath specified control.
            </summary>
            <param name="color">Starting color.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.#ctor(System.Drawing.Point)">
            <summary>
                Consructor with no starting color and starting position.
            </summary>
            <param name="p">Starting position.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.#ctor(System.Drawing.Color,System.Drawing.Point)">
            <summary>
                Constructor with starting color and starting position.
            </summary>
            <param name="color">Starting color.</param>
            <param name="p">Starting position.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ComboColorPickerDialog.Color">
            <summary>
                Gets or sets selected color.
            </summary>
            <value>
                Selected color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.ComboColorPickerDialog.ColorName">
            <summary>
                Gets name of selected color.
            </summary>
            <value>
                Name of selected color.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
                Override to capture Esc key.
            </summary>
            <param name="keyCode">Key.</param>
            <returns><c>True</c> if key handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.ComboColorPickerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.ComboColorPickerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Zeroit.Framework.FormEditors.WebColorPickerDialog">
            <summary>
                Represents a dialog that enabled the user to select a web color.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.#ctor">
            <summary>
                Default constructor (no starting color and default window position).
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.#ctor(System.Drawing.Color)">
            <summary>
                Constructor with starting color and default window position.
            </summary>
            <param name="color">Starting color.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor with no starting color and starting position beneath specified control.
            </summary>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.#ctor(System.Drawing.Color,System.Windows.Forms.Control)">
            <summary>
                Constructor with starting color and starting position beneath specified control.
            </summary>
            <param name="color">Starting color.</param>
            <param name="c">Control beneath which the dialog should be placed.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.#ctor(System.Drawing.Point)">
            <summary>
                Consructor with no starting color and starting position.
            </summary>
            <param name="p">Starting position.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.#ctor(System.Drawing.Color,System.Drawing.Point)">
            <summary>
                Constructor with starting color and starting position.
            </summary>
            <param name="color">Starting color.</param>
            <param name="p">Starting position.</param>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.WebColorPickerDialog.Color">
            <summary>
                Gets or sets selected color.
            </summary>
            <value>
                Selected color.
            </value>
        </member>
        <member name="P:Zeroit.Framework.FormEditors.WebColorPickerDialog.ColorName">
            <summary>
                Gets name of selected color.
            </summary>
            <value>
                Name of selected color.
            </value>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
                Override to capture Esc key.
            </summary>
            <param name="keyCode">Key.</param>
            <returns><c>True</c> if key handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Zeroit.Framework.FormEditors.WebColorPickerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Zeroit.Framework.FormEditors.WebColorPickerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
